<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>电商项目经验杂记1</title>
      <link href="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/"/>
      <url>/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<p>记录一些自己在电商项目上遇到和解决了一些问题的经验，提高日后的开发能力和效率</p><h1 id="1、使用逆向工程生成实体类和Mapper"><a href="#1、使用逆向工程生成实体类和Mapper" class="headerlink" title="1、使用逆向工程生成实体类和Mapper"></a>1、使用逆向工程生成实体类和Mapper</h1><p>本机逆向工程代码实例位置：E:\devTools\maven-tools\逆向工程实例代码\mybatis-generator</p><h2 id="逆向工程生成的类中有很多的注释，批量删除注释的方法："><a href="#逆向工程生成的类中有很多的注释，批量删除注释的方法：" class="headerlink" title="逆向工程生成的类中有很多的注释，批量删除注释的方法："></a>逆向工程生成的类中有很多的注释，批量删除注释的方法：</h2><p>**ctrl + R 正则表达式匹配： **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/|[ \t]*//.*)</span><br></pre></td></tr></table></figure><h2 id="2、单元测试写法："><a href="#2、单元测试写法：" class="headerlink" title="2、单元测试写法："></a>2、单元测试写法：</h2><p>单元测试时，自定义的测试类要这么写：</p><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/e8f14b5f9664ae51a9972bc6f1f4f991.png" class><h1 id="3、Service层处理业务逻辑功能更清晰"><a href="#3、Service层处理业务逻辑功能更清晰" class="headerlink" title="3、Service层处理业务逻辑功能更清晰"></a>3、Service层处理业务逻辑功能更清晰</h1><p>例如：service层下有异常处理包，有service接口，有接口的实现类impl包</p><p><strong>快捷键：ctrl + alt + t 对选中的代码块进行环绕，例如 if 、while 、for 、try等等</strong></p><h1 id="4、service中的注册功能进行密码加密："><a href="#4、service中的注册功能进行密码加密：" class="headerlink" title="4、service中的注册功能进行密码加密："></a>4、service中的注册功能进行密码加密：</h1><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/728bc69fd4c4d0a9b285a2109410fc4b.png" class><p><strong>盐值若不记录在数据库的话，会导致登录功能有误</strong></p><h2 id="外部定义一个调md5加密算法的方法："><a href="#外部定义一个调md5加密算法的方法：" class="headerlink" title="外部定义一个调md5加密算法的方法："></a>外部定义一个调md5加密算法的方法：</h2><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/e5fd33aa360e962863620c416b2ad366.png" class><h1 id="5、控制层封装响应结果集对象"><a href="#5、控制层封装响应结果集对象" class="headerlink" title="5、控制层封装响应结果集对象"></a>5、控制层封装响应结果集对象</h1><p>当中要包含状态码、描述信息、带泛型<E>的数据，以此对象返回前端</E></p><p>其中描述信息中，要将捕获的异常赋值进去，这样前端就能显示后台出了什么问题</p><h1 id="6、Controller层定义用于统一异常处理的基类BaseController"><a href="#6、Controller层定义用于统一异常处理的基类BaseController" class="headerlink" title="6、Controller层定义用于统一异常处理的基类BaseController"></a>6、Controller层定义用于统一异常处理的基类BaseController</h1><h2 id="使用-ExceptionHandler-要拦截的异常类-class-注解进行异常统一拦截处理"><a href="#使用-ExceptionHandler-要拦截的异常类-class-注解进行异常统一拦截处理" class="headerlink" title="使用@ExceptionHandler(要拦截的异常类.class) 注解进行异常统一拦截处理"></a>使用@ExceptionHandler(要拦截的异常类.class) 注解进行异常统一拦截处理</h2><p>@ExceptionHandler注解用于统一处理方法抛出的异常。当我们使用这个注解时，需要定义一个 异常的处理方法，再给这个方法加上@ExceptionHandler注解，这个方法就会处理类中其他方法 （被@RequestMapping注解）抛出的异常。@ExceptionHandler注解中可以添加参数，参数是某 个异常类的class，代表这个方法专门处理该类异常。</p><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/3fe7d2f8eb6705af4c72ad126baed260.png" class><p>又回顾了一遍ajax局部刷新向后台发送请求的流程，学习了一个新的传递参数的方式：<br>使用Ajax传递参数的时候，可以<strong>用serialize直接获取被选择的表单内所有参数值</strong>，<br>一起传值给后端，后端使用的springboot的话可以自动装配参数</p><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/f427b05692ec3eee67addade1437413c.png" class><br><br><h1 id="7、使用会话Session的收获"><a href="#7、使用会话Session的收获" class="headerlink" title="7、使用会话Session的收获"></a>7、使用会话Session的收获</h1><p>用session进行登录功能时，将获取session的对象封装到了controller层的基类中 (controller层中所有的controller都继承这个基类)</p><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/20c16830a5ec1b0cd94b2679b63997d4.png" class><br><h1 id="8、使用框架中的拦截器HandlerInterceptor："><a href="#8、使用框架中的拦截器HandlerInterceptor：" class="headerlink" title="8、使用框架中的拦截器HandlerInterceptor："></a>8、使用框架中的拦截器HandlerInterceptor：</h1><p>在访问某些页面时拦截未登录的用户，有三个方法，一般只用preHandle()方法</p><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/becdb303c1ce55da76fcd27c98c3989a.png" class><p>有拦截器还不够，因为有些页面，用户未登录也可以访问，不能全部拦截<br><strong>所以需要使用servlet中的过滤器来指定白名单(未登录可以访问的url)和黑名单(未登录不能访问的url)</strong></p><br><h1 id="9、servlet中的过滤器："><a href="#9、servlet中的过滤器：" class="headerlink" title="9、servlet中的过滤器："></a>9、servlet中的过滤器：</h1><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/6480410e873ed7aeec97599cb353c1e7.png" class><br><br>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux+nginx部署静态网站步骤以及访问nginx遇到的问题解决</title>
      <link href="/2022/08/28/Linux-nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AEnginx%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2022/08/28/Linux-nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AEnginx%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p><strong>首先说一下使用linux+nginx部署静态网站的步骤：</strong><br><strong>这里以ace静态网站为例，说明部署此类静态网站步骤：</strong></p><h1 id="一、linux-nginx部署ace静态网站："><a href="#一、linux-nginx部署ace静态网站：" class="headerlink" title="一、linux+nginx部署ace静态网站："></a>一、linux+nginx部署ace静态网站：</h1><h2 id="1、使用传输工具将项目传输到linux的-x2F-opt-x2F-www-x2F-ace目录下"><a href="#1、使用传输工具将项目传输到linux的-x2F-opt-x2F-www-x2F-ace目录下" class="headerlink" title="1、使用传输工具将项目传输到linux的&#x2F;opt&#x2F;www&#x2F;ace目录下"></a>1、使用传输工具将项目传输到linux的&#x2F;opt&#x2F;www&#x2F;ace目录下</h2><h2 id="2、使用vim修改nginx-1-14-2-x2F-conf-x2F-nginx-conf中的配置文件"><a href="#2、使用vim修改nginx-1-14-2-x2F-conf-x2F-nginx-conf中的配置文件" class="headerlink" title="2、使用vim修改nginx-1.14.2&#x2F;conf&#x2F;nginx.conf中的配置文件:"></a>2、使用vim修改nginx-1.14.2&#x2F;conf&#x2F;nginx.conf中的配置文件:</h2><p>即修改location中的请求拦截转发<br>location后面跟的是url中的请求地址<br>root后跟的是项目ace源文件在linux文件中的磁盘位置<br>index后面跟的是访问此项目时默认跳转的页面</p><img src="/2022/08/28/Linux-nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AEnginx%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/img.png" class><p><strong>这里要注意路径问题，源文件的位置必须放在root + &#x2F;ace 里面</strong></p><h2 id="3、修改完成后重启nginx"><a href="#3、修改完成后重启nginx" class="headerlink" title="3、修改完成后重启nginx"></a>3、修改完成后重启nginx</h2><p>至此，即可正常访问部署的静态网站</p><h1 id="二、部署nginx时遇到的问题解决："><a href="#二、部署nginx时遇到的问题解决：" class="headerlink" title="二、部署nginx时遇到的问题解决："></a>二、部署nginx时遇到的问题解决：</h1><p>这里出现问题：<br><strong>访问192.168.10.129&#x2F;ace时，出现无法访问，如下图这样</strong></p><img src="/2022/08/28/Linux-nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AEnginx%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/img_1.png" class><h2 id="1、原因："><a href="#1、原因：" class="headerlink" title="1、原因："></a>1、原因：</h2><p>磁盘中有若干nginx配置文件，未加载到正确的nginx.conf配置文件导致拦截转发请求失败</p><h2 id="2、解决"><a href="#2、解决" class="headerlink" title="2、解决"></a>2、解决</h2><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p>采用指定配置文件方式启动nginx服务：<br><code>./nginx -c /usr/soft/nginx/nginx-1.14.2/conf/nginx.conf</code></p><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p>修改nginx服务启动时的默认配置文件加载<br>修改方式如下：<br>####<strong>（1）查看Nginx默认配置文件nginx.conf路径</strong><br><code>nginx -t</code></p><p>查看到Nginx默认配置文件路径位置是：<br><code>/usr/local/nginx/conf/nginx.conf，可按以下步骤将其更改到/xxx/nginx路径下。</code></p><p>####<strong>（2）将原文件移动到需要更改的目录</strong><br><code>mv /usr/local/nginx/conf/nginx.conf /xxx/nginx/</code></p><p>####<strong>（3）创建连接到原目录</strong><br><code>ln -s /xxx/nginx/nginx.conf /usr/local/nginx/conf/</code></p><p>####<strong>（4）启动&#x2F;重启Nginx</strong><br><code>/usr/local/nginx/sbin/nginx 或 /usr/local/nginx/sbin/nginx -s reload</code></p><p><strong>推荐使用第一种方式，指定配置文件的加载，更加灵活</strong></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用springboot配置文件对源代码实现解耦合</title>
      <link href="/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/"/>
      <url>/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h1><p>今天在做项目的时候，<strong>写一个无session登录拦截以及部分页面放行的功能时</strong>，使用的传统方法，当配置项过多、并且这些配置项以后可能会更改，这种传统的方式将所有的配置项都写死在了java类中，感觉耦合度非常高，<strong>所以我就想：能不能对这种方式做一些优化？我想了很多种方案，不断尝试，例如使用注解注入配置文件的方式，</strong>我试了以下几种注解注入，结果要不就是报一堆异常，要不就是不能达到目的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:ListUrl.yml&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:ListUrl.yml&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;whitelist&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(LoginFilterConfig.class)</span></span><br></pre></td></tr></table></figure><p><strong>最后，功夫不负有心人，我找到了一种堪称完美的方式：使用springboot配置文件+Data赋值注入的方式，实现解耦合！</strong></p><p><strong>再介绍我这种方式之前，先给大家看看传统的方式完成登录拦截和放行功能的写法：</strong></p><h1 id="1、传统写法"><a href="#1、传统写法" class="headerlink" title="1、传统写法"></a>1、传统写法</h1><h2 id="（1）定义一个拦截器，并实现HandlerInterceptor并配置拦截条件以及页面跳转"><a href="#（1）定义一个拦截器，并实现HandlerInterceptor并配置拦截条件以及页面跳转" class="headerlink" title="（1）定义一个拦截器，并实现HandlerInterceptor并配置拦截条件以及页面跳转"></a>（1）定义一个拦截器，并实现HandlerInterceptor并配置拦截条件以及页面跳转</h2><img src="/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/a7c17cb5ec527df928e232c63e0ae6f6.png" class><h2 id="（2）定义过滤器类，并实现WebMvcConfigurer接口中的addInterceptors"><a href="#（2）定义过滤器类，并实现WebMvcConfigurer接口中的addInterceptors" class="headerlink" title="（2）定义过滤器类，并实现WebMvcConfigurer接口中的addInterceptors"></a>（2）定义过滤器类，并实现WebMvcConfigurer接口中的addInterceptors</h2><p><strong>手动创建List集合，并将放行的页面的字符串一个个添加到list中</strong></p><img src="/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/4406f8deb4fc7ba9411007e146fd7ae5.png" class><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>​这样就使用传统的方式完成了登录拦截和部分页面放行的功能，<strong>但这种方式从代码上看，很明显的一个缺陷就是设置放行页面时，代码耦合度太高，</strong>将来某一天想取消放行或增加额外的放行页面时，还需要修改java源代码。</p><p>​<strong>所以我想到了使用配置文件的方式，将这些放行页面的路径字符串添加为springboot的list集合配置项，然后在java代码中注入该集合，实现配置文件的读取。</strong></p><p><strong>将来修改放行页面时直接在配置文件中改，这样不就耦合度大大降低了吗？</strong></p><h1 id="2、配置文件的方式"><a href="#2、配置文件的方式" class="headerlink" title="2、配置文件的方式"></a>2、配置文件的方式</h1><h2 id="（1）配置拦截器，这步同上，没有变化"><a href="#（1）配置拦截器，这步同上，没有变化" class="headerlink" title="（1）配置拦截器，这步同上，没有变化"></a>（1）配置拦截器，这步同上，没有变化</h2><h2 id="（2）springboot主配置文件声明配置项"><a href="#（2）springboot主配置文件声明配置项" class="headerlink" title="（2）springboot主配置文件声明配置项"></a>（2）springboot主配置文件声明配置项</h2><p>​<strong>这里一定要注意List集合在yml配置文件中的书写方式</strong></p><p>​<strong>- 与 list元素之间有空格！</strong></p><img src="/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/5a2c73825d02143d502337650f9661ff.png" class><h2 id="（3）配置拦截器"><a href="#（3）配置拦截器" class="headerlink" title="（3）配置拦截器"></a>（3）配置拦截器</h2><h3 id="注解作用以及原理解释："><a href="#注解作用以及原理解释：" class="headerlink" title="***注解作用以及原理解释："></a>***注解作用以及原理解释：</h3><p>​<strong>- 使用Lombok中的@Data注解进行属性的赋值注入</strong></p><p>​<strong>- 添加了@Configuration注解后，此类会被spring容器标记为配置类，springboot会将其主配置文件application.yml中的配置项与此类中的属性进行”按名对应“，并通过Set方法注入（此步使用@Data自动完成）</strong></p><p>​<strong>- @ConfigurationProperties注解设置配置项的前缀</strong></p><img src="/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/b04270d66878745c37583e460a171f4e.png" class><h2 id="完成-1"><a href="#完成-1" class="headerlink" title="完成"></a>完成</h2><p>​<strong>这样，优化后的这种读取配置文件的方式实现登录拦截放行功能就完成了，相比传统的那种，不仅代码更简洁，而且耦合度更低，代码更易于修改维护管理，以后遇到类似的可以使用配置文件解耦合的地方可以经常使用！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排除Bug的一些记录</title>
      <link href="/2022/08/20/%E6%8E%92%E9%99%A4Bug%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/08/20/%E6%8E%92%E9%99%A4Bug%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>本文记录了一些在网站开发初期遇到的常见问题以及解决方法，记录在这里用于巩固自己记忆以及帮助搜索这些问题的人能更快地解决问题！</p><h1 id="1、远程部署网站后未加载最新的文章"><a href="#1、远程部署网站后未加载最新的文章" class="headerlink" title="1、远程部署网站后未加载最新的文章"></a>1、远程部署网站后未加载最新的文章</h1><p>使用hexo new “” ，创建文章并完成，上传gitee、部署网站、刷新后发现新文章仍未发布<br>这种情况一般是上传问题！</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先检查hexo d上传后的gitee仓库的最后一次更新时间是否为&quot;刚刚&quot;</span><br><span class="line">若不是，则检查_config.yml中的仓库地址repository和分支branch是否正确</span><br><span class="line">若是，则在giteePages服务页中，手动点击更新，待重新部署后，文章正常显示！</span><br></pre></td></tr></table></figure><h1 id="2、使用md语法写的文章图片不显示或加载失败"><a href="#2、使用md语法写的文章图片不显示或加载失败" class="headerlink" title="2、使用md语法写的文章图片不显示或加载失败"></a>2、使用md语法写的文章图片不显示或加载失败</h1><h2 id="1-我们需要安装一个图片路径转换的插件，插件名字为hexo-asset-image，只需执行以下命令"><a href="#1-我们需要安装一个图片路径转换的插件，插件名字为hexo-asset-image，只需执行以下命令" class="headerlink" title="(1)我们需要安装一个图片路径转换的插件，插件名字为hexo-asset-image，只需执行以下命令"></a>(1)我们需要安装一个图片路径转换的插件，插件名字为hexo-asset-image，只需执行以下命令</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先进入你的hexo根目录下，然后执行以下命令下载插件</span><br><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure><h2 id="2-打开hexo根目录下的-config-yml文件，修改post-asset-folder为true"><a href="#2-打开hexo根目录下的-config-yml文件，修改post-asset-folder为true" class="headerlink" title="(2)打开hexo根目录下的_config.yml文件，修改post_asset_folder为true"></a>(2)打开hexo根目录下的_config.yml文件，修改post_asset_folder为true</h2><p>这一步的目的是：打开文章资源文件夹功能。<br>当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new 命令创建新文章时自动创建一个文件夹。<br>这个资源文件夹将会有与这个md文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，<br>你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p><h2 id="3-使用相对路径引用图片或其他静态资源"><a href="#3-使用相对路径引用图片或其他静态资源" class="headerlink" title="(3)使用相对路径引用图片或其他静态资源"></a>(3)使用相对路径引用图片或其他静态资源</h2><p>在md语法中，使用的是这种方式引用图片：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用! [](你的博文名字/图片名称)插入图片即可。</span><br></pre></td></tr></table></figure><p>但是在hexo3之后这种语法已经不适用了，引用资源时采用下面这种方式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先将图片等静态资源放在hexo new 命令执行后生成的同名文件夹中</span><br><span class="line">然后在图片引用处：</span><br><span class="line">&#123;% asset_img &quot;图片名称&amp;后缀&quot; &quot;图片描述信息&quot; %&#125;</span><br></pre></td></tr></table></figure><p>官方参考使用说明地址：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hexo.io/zh-cn/docs/asset-folders</span><br></pre></td></tr></table></figure><p>问题解决参考博主地址：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_33827590/article/details/93066614?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-93066614-blog-113460538.pc_relevant_multi_platform_whitelistv4eslandingrelevant2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-93066614-blog-113460538.pc_relevant_multi_platform_whitelistv4eslandingrelevant2&amp;utm_relevant_index=1</span><br></pre></td></tr></table></figure><h1 id="3、访问网站时样式加载失败"><a href="#3、访问网站时样式加载失败" class="headerlink" title="3、访问网站时样式加载失败"></a>3、访问网站时样式加载失败</h1><p>这个问题是比较常见的一个问题了，即使之前我解决过，但今天居然又遇到这种情况，但很快也又解决了！<br>我分享一下我面对这个问题的一个解决思路：</p><p>1、一般都是路径错误，在网页端按F12进入调试页，就可以查看样式未加载的404报错信息中的URL错误<br>2、观察仓库中图片的路径<br>3、在hexo g生成的public文件夹中的index.html中查看css引用地址和仓库中的图片路径的不同之处</p><img src="/2022/08/20/%E6%8E%92%E9%99%A4Bug%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/img.png" class><p>4、一般都是根路径的问题，我这里的root直接为”&#x2F;“，表示为仓库的根路径<br>这样在引用图片的时候不需要加格外的相对路径，直接输入图片名称即可引用</p><img src="/2022/08/20/%E6%8E%92%E9%99%A4Bug%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/img_1.png" class><h1 id="4、网站URL取消子域名"><a href="#4、网站URL取消子域名" class="headerlink" title="4、网站URL取消子域名"></a>4、网站URL取消子域名</h1><p>之前我这个博客的网站地址是<a href="https://doublepeach/gitee.io/Doublepeach/git.io">https://Doublepeach/gitee.io/Doublepeach/git.io</a><br>可以看到，这个网址比较长，而且前后域名和子域名重复，完全一样。<br>而现在的域名：<a href="https://doublepeach.gitee.io/">https://doublepeach.gitee.io</a> 就简洁多了 ，那怎么做到的呢？<br>(1)首先在仓库的管理页中，将仓库名称和仓库地址修改为一样的，如下：</p><img src="/2022/08/20/%E6%8E%92%E9%99%A4Bug%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/img_2.png" class><p>(2)然后在hexo根目录下的_config.yml文件中修改repository仓库地址为新地址<br>(3)还是在_config.yml中,修改URL为 https:&#x2F;&#x2F;仓库名.gitee.io 即可</p><h1 id="5、文章模板设设置"><a href="#5、文章模板设设置" class="headerlink" title="5、文章模板设设置"></a>5、文章模板设设置</h1><p>每次hexo new 新文章时都需要写一些顶部的文章配置，为了方便，可以直接修改创建文件时的模板内容<br>修改位置为：  hexo根目录下的scaffolds(脚手架)下的post.md<br>这里推荐的常用模板：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: 标签</span><br><span class="line">description: 描述信息</span><br><span class="line">sticky: 优先级</span><br><span class="line">comments: 是否开启评论(true或false)</span><br><span class="line">keywords: 关键字</span><br><span class="line">top_img: 顶部图片</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo部署到gitee时图片无法加载问题的完美解决</title>
      <link href="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/"/>
      <url>/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h1><p>使用hexo部署静态网站或博客时，经常会有一个问题：明明导入了图片以及其他的js文件以及css文件，也成功部署了网站，但访问时，无论是图片还是样式就是加载不出来？？！！</p><p>这篇文章记录了我发现问题，并一步一步排除问题的过程。若不想听我絮絮叨debug过程，想直接解决问题，可直接跳到总结即可。</p><br><h1 id="二、问题查找"><a href="#二、问题查找" class="headerlink" title="二、问题查找"></a>二、问题查找</h1><p>前段时间在github上部署的时候也出现过图片样式不加载的问题，当时查找出来的问题是_config.yml文件中的url和root错误，修改完后还在csdn社区发帖子记录了这个问题以及解决方案。</p><p>万万没想到，才没过几天，我又遇到了css样式无法加载的这个问题。由于github访问速度实在受不了，所以这次我是想部署到gitee上，没想到又遇到这个问题，我第一反应是几天前的那个问题，但我检查后发现并没有修改，url和root都和在github部署时一样，</p><p>那是什么原因导致的呢？我带着这个疑问，看了网上其他的一些博主的解决方案，试了好几个还是无法解决样式不加载的问题，最后我看到了一篇文章中提到的一个观点，让我突然醍醐灌顶：<strong>在hexo g 渲染命令执行后，生成的public文件夹中的index.html文件中的路径不匹配资源或拼接的路径有误</strong>，我立马就去hexo g查看了我的public下的index.html中的资源路径引用，果然发现了问题</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/30e757e95c930ecf1c48dfd7935be3ad.png" class title="图片"><p>这路径，一看就不合法呀，”&#x2F;.&#x2F;“是什么鬼？! <strong>所以我立马就定位到是我引入图片资源时配置的路径的问题</strong>，然后我将主题配置文件中所有的.&#x2F;都修改为&#x2F; 。如下：</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/a18be1fedea1c2b632c3def8987c9217.png" class><p>这样再hexo g编译时生成的资源路径拼接就正确了，如下：</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/667bd3bd00a1932b3f678abe99a1ca8b.png" class><p>解决了路径问题后我立马开启hexo三件套hexo clean 、hexo g 、 hexo d 上传、重部署、刷新！结果。。。还是css样式不加载。。。我人傻了，懵了好一整子，<strong>痛定思痛</strong>，决定再细细走一边这个路径问题，在我鼠标跟着大脑逻辑一阵跳转后，终于发现：<strong>还是路径问题，只不过这个路径问题是仓库路径根路径问题</strong></p><p>原先我的url和root是这样的：</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/9cd6bd88bce3c8702aa19ca941bc390d.png" class><p>但事实上，<strong>这里的url是要填写最终网站部署的url，而root根路径就是代表仓库本身，而hexo g 是直接把各种静态资源放在了重渲染后生成的public文件夹，并且hexo d上传时也只上传public文件夹中的资源</strong>，所以root这里不需要加任何东西，如下：</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/f9f8b97b92235fab9a07cd98af74c133.png" class><p><strong>然后，三件套重部署后，刷新！噫！成了！！！css等样式都正常加载，其他资源也能正常访问！ 完美解决！</strong></p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><h3 id="1、修改-config-yml文件中的url和root"><a href="#1、修改-config-yml文件中的url和root" class="headerlink" title="1、修改_config.yml文件中的url和root"></a>1、修改_config.yml文件中的url和root</h3><p>如图：</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/f9f8b97b92235fab9a07cd98af74c133.png" class><p><strong>其中url为自己最终部署的网站地址，gitee上为pages页中的以下路径：</strong></p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/098e3a413146d4622cf8a40560a5cb6f.png" class><h3 id="2、检查资源路径问题"><a href="#2、检查资源路径问题" class="headerlink" title="2、检查资源路径问题"></a>2、检查资源路径问题</h3><p><strong>查看hexo g后的public文件夹中的index.html文件中的静态资源引用，url拼接是否正确</strong>,若不正确或有明显拼接错误的，在资源引用处修改，这里每个人的情况不一样，就不上图了，只要注意一点：“ url + root + 资源引入 ” 这三个拼接起来要等于你要引入的静态资源在上传gitee后的仓库中的资源路径。</p><br><h3 id="这样就可以完美解决问题了，文章图片正常加载！！！"><a href="#这样就可以完美解决问题了，文章图片正常加载！！！" class="headerlink" title="这样就可以完美解决问题了，文章图片正常加载！！！"></a>这样就可以完美解决问题了，文章图片正常加载！！！</h3>]]></content>
      
      
      
        <tags>
            
            <tag> hexo相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2022/08/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2022/08/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>测试一下图片导入功能~~~</p><h2 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h2><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/f9f8b97b92235fab9a07cd98af74c133.png"></p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><img src="/2022/08/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/f9f8b97b92235fab9a07cd98af74c133.png" class title="图片"><p>测试完成，第一种不能显示图片，第二种可以<br>（要注意：md文件和资源文件不在同一个文件夹下，而是关联关系）</p>]]></content>
      
      
      <categories>
          
          <category> 分类1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2022/08/16/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/"/>
      <url>/2022/08/16/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/10/hello-world/"/>
      <url>/2022/08/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
