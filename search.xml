<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记录一次数据库的神秘报错</title>
      <link href="/2023/11/15/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%A5%9E%E7%A7%98%E6%8A%A5%E9%94%99/"/>
      <url>/2023/11/15/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%A5%9E%E7%A7%98%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p><strong>记录一次数据库的神秘报错</strong></p><p>运行yimu-smart时报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR o.s.b.SpringApplication - [reportFailure,843] - Application run failed</span><br><span class="line">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#x27;sysJobController&#x27;: Unsatisfied dependency expressed through field &#x27;jobService&#x27;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;sysJobServiceImpl&#x27;: Invocation of init method failed; nested exception is org.quartz.impl.jdbcjobstore.LockException: Failure obtaining db row lock: Table &#x27;yimu-smart.QRTZ_LOCKS&#x27; doesn&#x27;t exist [See nested exception: java.sql.SQLSyntaxErrorException: Table &#x27;yimu-smart.QRTZ_LOCKS&#x27; doesn&#x27;t exist]</span><br></pre></td></tr></table></figure><br><p>这个问题是说数据库中缺少QRTZ_LOCKS这个表，程序访问数据库时找不到这个表。</p><p>但是我在yml配置文件中配置本地数据库时却能正常运行起来</p><img src="/2023/11/15/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%A5%9E%E7%A7%98%E6%8A%A5%E9%94%99/f7227eb4c4c007516798c1726b12ee21.png" class><p>但是一换成上面的8.140.247.245服务器的数据库时就报那个错误，但是我查看了我本地和服务器上的数据库，结构和数据都是完全一样的，运行程序时却一个可以运行，一个报错。</p><p>追根求因：</p><p>经过一番DEBUG，最终发现，我的数据库中有qrtz_locks表，即QRTZ_LOCKS的小写，这才发觉有没有可能是数据库大小写识别的问题，我们正常安装mysql时它默认是大小写不敏感的，也就是说程序在查询数据库时大小写都可以，但是在云服务器上使用docker pull mysql:5.7 拉取下来的mysql，它默认是大小写敏感的，所以才导致了查询QRTZ_LOCKS表找不到的情况。</p><br><br><p>解决：</p><br><p>要关闭 MySQL 数据库的大小写敏感性，您可以按照以下步骤进行操作：</p><ol><li><p>编辑 MySQL 服务器的配置文件。在 Linux 系统上，默认的配置文件路径通常是 &#x2F;etc&#x2F;my.cnf 或 &#x2F;etc&#x2F;mysql&#x2F;my.cnf。在 Windows 系统上，默认的配置文件路径通常是 C:\Program Files\MySQL\MySQL Server X.X\my.ini。</p></li><li><p>打开配置文件，并在 [mysqld] 部分添加或修改以下行：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure><p>将 lower_case_table_names 的值设置为 1。这个选项告诉 MySQL 将所有表名转换为小写。</p><ol start="3"><li>保存配置文件并重新启动 MySQL 服务器，以使更改生效。</li></ol><br><p><strong>注意：如果mysql是使用docker拉取的，则使用以下方式编辑mysql的配置文件：</strong></p><ol><li>确定正在运行的 MySQL 容器的名称或 ID。可以使用以下命令列出运行中的容器：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><ol start="2"><li><p>找到正在运行的 MySQL 容器，并复制其名称或 ID。</p><p>使用以下命令进入 MySQL 容器的 shell：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;容器名称或ID&gt; bash</span><br></pre></td></tr></table></figure><ol start="3"><li>进入容器shell后默认是没有编辑器的，所以无法使用vi命令来编辑配置文件，这里下载nano作为编辑器</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nano</span><br></pre></td></tr></table></figure><ol start="4"><li>然后进入编辑配置文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure><ol start="5"><li>在编辑器中找到 [mysqld] 部分，并在其中添加或修改以下行：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure><ol start="6"><li><p>保存文件并退出编辑器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nano编辑器保存命令是：ctrl+O</span><br><span class="line">退出命令是：ctrl+X</span><br></pre></td></tr></table></figure></li><li><p>exit退出shell</p></li><li><p>重启 MySQL 容器，以使更改生效。可以使用以下命令重启容器：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart &lt;容器名称或ID&gt;</span><br></pre></td></tr></table></figure><p>这样再访问云服务器上docker的数据库时就不会出现找不到表的报错了。</p><p>这个错误还是挺难发现的，特此记录一下，以帮助到后来被此bug折磨的人……</p>]]></content>
      
      
      <categories>
          
          <category> 分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地部署外部Javaweb、SSM、SpringBoot项目的经验小记</title>
      <link href="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/"/>
      <url>/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这几天我在搞小学期任务时，帮别人部署了很多次项目，其中包含：</p><pre><code>基于Servlet写的Javaweb项目-图书管理系统基于SSM的-学生宿舍管理系统基于SpringBoot的-ERP仓库管理系统</code></pre><p>现总结一下，这三种不同框架在部署时应当如何正确有效地在本地跑起来</p><h1 id="一、JavaWeb项目部署"><a href="#一、JavaWeb项目部署" class="headerlink" title="一、JavaWeb项目部署"></a>一、JavaWeb项目部署</h1><p>以下是基于servlet的javaweb项目部署流程，以图书管理系统为例</p><h2 id="1-导入项目和数据库"><a href="#1-导入项目和数据库" class="headerlink" title="1. 导入项目和数据库"></a>1. 导入项目和数据库</h2><p>将拉取到的项目在IDEA中打开，注意要打开项目的根目录</p><p>然后导入数据库，打开navicat导入已有的.sql数据库文件</p><img src="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/87e364f9bfad8165736de8ae38e799be.png" class><p>在项目的对于数据库配置中，修改为自己本地的配置</p><img src="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/a634f27428da6f6d0c5bf00caabc60df.png" class><h2 id="2-设置项目字符集"><a href="#2-设置项目字符集" class="headerlink" title="2. 设置项目字符集"></a>2. 设置项目字符集</h2><p>设置字符集：</p><pre><code>打开设置--&gt;编辑器--&gt;File Encoding--&gt;将字符集统一为UTF-8</code></pre><img src="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/382482e5c1bc27824ef8ee42126c7846.png" class><h2 id="3-设置项目结构"><a href="#3-设置项目结构" class="headerlink" title="3. 设置项目结构"></a>3. 设置项目结构</h2><h3 id="3-1设置JDK"><a href="#3-1设置JDK" class="headerlink" title="3.1设置JDK"></a>3.1设置JDK</h3><img src="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/9aa8300503b7efca6b9dee041f32f143.png" class><h3 id="3-2-设置src文件夹为代码源"><a href="#3-2-设置src文件夹为代码源" class="headerlink" title="3.2 设置src文件夹为代码源"></a>3.2 设置src文件夹为代码源</h3><img src="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/8ad374fa038178f4afef06481f73a283.png" class><h3 id="3-3-添加Web框架支持"><a href="#3-3-添加Web框架支持" class="headerlink" title="3.3 添加Web框架支持"></a>3.3 添加Web框架支持</h3><img src="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/61e8f3e8796ccc842f77a634a4aef02f.png" class><p>添加Web Application4.0框架支持</p><img src="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/cc87e10289e5138d1747f4ba3e8cc2e2.png" class><p>删除自动生成的web模块，并且在模块中将Web资源目录修改为项目中的Web资源路径：</p><img src="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/83f085591d689778b3ddc8646835f54f.png" class><h3 id="3-4-添加依赖"><a href="#3-4-添加依赖" class="headerlink" title="3.4 添加依赖"></a>3.4 添加依赖</h3><p>将必要的依赖库全部添加进来</p><img src="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/98963d3bed48db4c8e1a4260c79809d8.png" class><h3 id="3-5-指定输出路径"><a href="#3-5-指定输出路径" class="headerlink" title="3.5 指定输出路径"></a>3.5 指定输出路径</h3><p>指定输出路径为项目下的out目录，没有就自己新建</p><p>注意：这里指定了输出路径后，Tomcat可能会无法点击运行，重启一下IDEA就好</p><h2 id="4-部署到Tomcat服务器"><a href="#4-部署到Tomcat服务器" class="headerlink" title="4. 部署到Tomcat服务器"></a>4. 部署到Tomcat服务器</h2><p>新建一个本地tomcat服务</p><p>部署工件Exploded，修改应用程序上下文</p><img src="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/dff4b9723978e18a4a93aef2321d7f78.png" class><h2 id="5-运行项目成功"><a href="#5-运行项目成功" class="headerlink" title="5. 运行项目成功"></a>5. 运行项目成功</h2><img src="/2023/06/29/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%96%E9%83%A8Javaweb%E3%80%81SSM%E3%80%81SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%B0%8F%E8%AE%B0/695b307fcabb1b633b3cee3c1c3c077f.png" class><br><h1 id="二、基于SSM的Web项目部署"><a href="#二、基于SSM的Web项目部署" class="headerlink" title="二、基于SSM的Web项目部署"></a>二、基于SSM的Web项目部署</h1><p>以下演示基于SSM的Web项目部署，以宿舍管理系统为例</p><p>SSM的部署与上面的Sevlet项目部署方式基本相同，只有以下两点略不同：</p><ul><li>添加依赖库的时候，添加的库有所不同</li><li>代码中的数据库配置信息位置不同，SSM的在resources文件夹中，记住要标记此文件夹为资源根才能使配置信息生效</li></ul><br><h1 id="三、基于SpringBoot项目部署"><a href="#三、基于SpringBoot项目部署" class="headerlink" title="三、基于SpringBoot项目部署"></a>三、基于SpringBoot项目部署</h1><p>这个也是很熟悉了，以下是大致过程：<br><strong>1. 导入maven项目<br>2. 设置项目JDK与pom文件中版本保持一致<br>3. 本地安装maven，并且修改maven根目录下conf文件夹内的setting.xml中的配置<br>4. 在setting.xml中找到 <localRepository>标签，设置本地的仓库路径，例如：</localRepository></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;&quot;这部分填写你本地的仓库位置，自己建一个文件夹即可&quot;&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><p><strong>5. 在setting.xml中找到<mirror>标签，配置maven中央仓库的镜像为aliyun镜像，可以提高maven拉取依赖时的下载速度（直接复制在对应的位置）</mirror></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">    &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;       </span><br><span class="line">  &lt;/mirror&gt; </span><br></pre></td></tr></table></figure><p><strong>6. 在IDEA中配置刚刚下好的maven的主目录位置、配置文件位置、仓库位置<br>7. 刷新maven导入依赖<br>8. 导入数据库信息，并在yml中修改数据库配置为本地信息<br>9. 启动SpringBoot项目</strong></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机网络配置</title>
      <link href="/2023/06/26/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/06/26/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>今天在学习Hadoop时解决了一直以来对虚拟机网络配置的迷惑，之前总是不知道该如何配置虚拟机静态IP网络，现将这些问题总结一下，并以流程形式一步一步配置一个静态IP的虚拟机网络</p><h2 id="（1）使用VMware创建CentOS7的虚拟机"><a href="#（1）使用VMware创建CentOS7的虚拟机" class="headerlink" title="（1）使用VMware创建CentOS7的虚拟机"></a>（1）使用VMware创建CentOS7的虚拟机</h2><h2 id="（2）修改VM虚拟机网络IP配置"><a href="#（2）修改VM虚拟机网络IP配置" class="headerlink" title="（2）修改VM虚拟机网络IP配置"></a>（2）修改VM虚拟机网络IP配置</h2><ul><li><p>查看Linux虚拟机的虚拟网络编辑器，编辑-&gt;虚拟网络编辑器-&gt;VMnet8</p><ul><li>选择NAT模式</li><li>在VMnet8中设置子网IP：192.168.xx.0</li><li>在NAT设置中将网关修改为：192.168.xx.2</li></ul></li><li><p>查看Windows系统适配器VMware Network Adapter VMnet8的IP地址</p></li><li><p>保证Linux系统ifcfg-ens33文件中IP地址、虚拟网络编辑器地址和Windows系统VM8网络IP地址相同。</p><ul><li>把这里的默认网关修改为VM中NAT里设置的网关即可</li><li>注：图中的DNS服务器最好还是不要修改，因为这里虽然改的是虚拟机VM8的网卡配置，但是你在主机上访问浏览器上网时，会默认加载已经修改过DNS的网卡，所以此时你上网时会网速变慢</li></ul></li></ul><h2 id="（3）修改网络配置信息："><a href="#（3）修改网络配置信息：" class="headerlink" title="（3）修改网络配置信息："></a>（3）修改网络配置信息：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><ul><li>修改BOOTPROTO为static</li><li>修改ONBOOT为yes</li><li>添加IPADDR、GATWAY、DNS，这些信息要保持与VM中配置的一致</li></ul><h2 id="（4）修改主机名"><a href="#（4）修改主机名" class="headerlink" title="（4）修改主机名"></a>（4）修改主机名</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure><h2 id="（5）Linux克隆机主机名称映射hosts文件，打开-x2F-etc-x2F-hosts-添加对应的配置"><a href="#（5）Linux克隆机主机名称映射hosts文件，打开-x2F-etc-x2F-hosts-添加对应的配置" class="headerlink" title="（5）Linux克隆机主机名称映射hosts文件，打开&#x2F;etc&#x2F;hosts 添加对应的配置"></a>（5）Linux克隆机主机名称映射hosts文件，打开&#x2F;etc&#x2F;hosts 添加对应的配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.100 hadoop100</span><br><span class="line">192.168.10.101 hadoop101</span><br><span class="line">192.168.10.102 hadoop102</span><br></pre></td></tr></table></figure><p>以上配置指的是虚拟机中只要含hadoop100就对应192.168.10.100的主机，便于统一管理</p><h2 id="（6）修改本地hosts配置文件主机映射"><a href="#（6）修改本地hosts配置文件主机映射" class="headerlink" title="（6）修改本地hosts配置文件主机映射"></a>（6）修改本地hosts配置文件主机映射</h2><p>（a）进入C:\Windows\System32\drivers\etc路径<br>（b）拷贝hosts文件到桌面<br>（c）打开桌面hosts文件并添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.100 hadoop100</span><br><span class="line">192.168.10.101 hadoop101</span><br><span class="line">192.168.10.102 hadoop102</span><br></pre></td></tr></table></figure><p>这样就将虚拟机的网络与主机相对应</p><p>（d）将桌面hosts文件覆盖C:\Windows\System32\drivers\etc路径hosts文件</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这样我们就得到了一个与主机共享网络，且IP不会变化的虚拟机Linux系统</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署微服务项目小记</title>
      <link href="/2023/05/01/%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%B0%8F%E8%AE%B0/"/>
      <url>/2023/05/01/%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>   最近做了一个关于农业的微服务项目，项目体量还是挺大的，前端和后端应用加起来一共有9个微服务（每次测试跑起来还是蛮费力的哈哈）<br>项目做完后该打包部署上线到Linux服务器，为此我还整了4台云服务器（本来只有两台但是不够用，项目太大部署上去直接崩了…）<br>现总结一下我部署后端程序时的操作流程：</p><p>对于微服务项目的打包部署，步骤如下：</p><h1>1.父项目(root项目)中添加依赖：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>2.maven打包</h1><p>（1）切换跳过测试模式，不然test中有错误打包会报错</p><img src="/2023/05/01/%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%B0%8F%E8%AE%B0/6d328461030044e5582d47dcddbebbad.png" class><p>（2）生命周期中clean一下，然后再install</p><p>（3）就会在每个子模块下生成target文件夹</p><img src="/2023/05/01/%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%B0%8F%E8%AE%B0/b5c1aeb0ff539dafb374f6edc41f6ebb.png" class><p>（4）将其中每个模块中的target中打包好.jar包分别复制上传到云服务器中对应的文件夹中</p><img src="/2023/05/01/%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%B0%8F%E8%AE%B0/16b8b03f26cfdb97da2636efad02a581.png" class><h1>3.编写Dockerfile文件，并使用命令构建镜像</h1><img src="/2023/05/01/%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%B0%8F%E8%AE%B0/f81e9104b42ff9e8234c86bb3461618c.png" class><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build service-gateway-1.0/ -t service-gateway-1.0</span><br></pre></td></tr></table></figure><h1>4.运行构建好的docker镜像,启动服务</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8110:8110 service-core-1.0</span><br></pre></td></tr></table></figure><p><strong>这样就完成了其中一个微服务的部署，其余模块的微服务项目也同理，依次将各个有启动类的微服务项目打包部署，完成整个项目的上线。</strong></p><br><p><strong>注意：部署时，有注册中心的先启动注册中心，然后再部署网关服务，再部署其他的子微服务，要按顺序来，才能确保整个服务平稳上线</strong></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用工具之代码生成器和日志配置</title>
      <link href="/2023/04/09/%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/04/09/%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>以下的代码生成器和日志文件配置是我从srb项目中学习到的，其中的代码生成器和我以前用的mybatis逆向生成器截然不同<br>这个生成器更加全面一些。日志配置在大型项目中也很有用，可以更快的定位到问题的发生，其中包含了本地文件日志记录</p><h1 id="•-代码生成器："><a href="#•-代码生成器：" class="headerlink" title="• 代码生成器："></a>• 代码生成器：</h1><h2 id="代码生成器，需要导入的依赖有"><a href="#代码生成器，需要导入的依赖有" class="headerlink" title="代码生成器，需要导入的依赖有"></a>代码生成器，需要导入的依赖有</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">velocity.version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">velocity.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis-plus 代码生成器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Mybatis Plus 代码生成器模板引擎,  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;velocity.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建测试类，复制如下的生成代码，根据具体需要修改配置："><a href="#创建测试类，复制如下的生成代码，根据具体需要修改配置：" class="headerlink" title="创建测试类，复制如下的生成代码，根据具体需要修改配置："></a>创建测试类，复制如下的生成代码，根据具体需要修改配置：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">genCode</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;HTT&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>); <span class="comment">//生成后是否打开资源管理器</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);    <span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line">        gc.setIdType(IdType.AUTO); <span class="comment">//主键策略</span></span><br><span class="line">        gc.setSwagger2(<span class="literal">true</span>);<span class="comment">//开启Swagger2模式</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://47.92.69.43:3306/srb?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;333&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.htt.srb.core&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;pojo.entity&quot;</span>); <span class="comment">//此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</span></span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line"></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>); <span class="comment">// lombok</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;is_deleted&quot;</span>);<span class="comment">//逻辑删除字段名</span></span><br><span class="line">        strategy.setEntityBooleanColumnRemoveIsPrefix(<span class="literal">true</span>);<span class="comment">//去掉布尔值的is_前缀（确保tinyint(1)）</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="•-日志配置："><a href="#•-日志配置：" class="headerlink" title="• 日志配置："></a>• 日志配置：</h1><h2 id="在resources下创建logback-spring-xml文件，内容如下"><a href="#在resources下创建logback-spring-xml文件，内容如下" class="headerlink" title="在resources下创建logback-spring.xml文件，内容如下"></a>在resources下创建logback-spring.xml文件，内容如下</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>HttSrb<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志的输出目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;E:/项目/srb/srb_log/core&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制台日志格式：彩色日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- boldMagenta:粗红--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cyan:青色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- white:白色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) %highlight([%-5level]) %green(%logger) %msg%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文件日志格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;%date&#123;yyyy-MM-dd HH:mm:ss&#125; [%-5level] %thread %file:%line %logger %msg%n&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ENCODING&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;ENCODING&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文件日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;ENCODING&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--滚动日志防止单日志文件过大--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ROLLING_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  要区别于其他的appender中的文件名字  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log-rolling.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;ENCODING&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置滚动日志记录的滚动策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-rolling-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--归档日志文件保留的最大数量--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!--归档日志触发时机--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10KB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境和测试环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev,test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.htt&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;appender-ref ref=&quot;ROLLING_FILE&quot; /&gt;--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.htt&quot;</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ROLLING_FILE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目中静态资源访问的处理</title>
      <link href="/2022/12/09/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2022/12/09/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1、问题："><a href="#1、问题：" class="headerlink" title="1、问题："></a>1、问题：</h2><p>使用SpringBoot项目写一个文件上传的需求，发现在项目启动后无法直接访问resources&#x2F;templates下的静态资源页面（html页面）。</p><h2 id="2、问题原因："><a href="#2、问题原因：" class="headerlink" title="2、问题原因："></a>2、问题原因：</h2><p>SpringBoot项目中<strong>resources&#x2F;templates下的静态资源是不能直接访问的</strong>，原因是没有开放访问权限的，因为templates下可能存放有后台管理的页面资源，当templates对外开放就会产生安全隐患，所以templates下的资源需要通过<strong>ViewResolver(视图解析器)去解析访问</strong>，大体流程：<strong>前端request请求-&gt;DispatcherServlet（前端控制器）-&gt; Controller层的跳转方法 -&gt; ViewResslver（视图解析器）-&gt;templates下的静态资源</strong>（SpringMVC的工作流程）。</p><h2 id="3、解决办法："><a href="#3、解决办法：" class="headerlink" title="3、解决办法："></a>3、解决办法：</h2><p><strong>通过访问Controller层方法跳转到需要访问的静态资源</strong></p><h2 id="4、注意："><a href="#4、注意：" class="headerlink" title="4、注意："></a>4、注意：</h2><p>1、这里需要<strong>使用@Controller</strong>，不能使用RestController，不然会以Json格式响应到页面，不会进行视图解析。以下是正常的访问方式：</p><img src="/2022/12/09/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E7%9A%84%E5%A4%84%E7%90%86/771a2af43ba4e043fdb00f4c4d43b076.png" class><img src="/2022/12/09/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E7%9A%84%E5%A4%84%E7%90%86/3ae2a5f42a73f6bc17c6624b6a9fa509.png" class><p><strong>如果通过Controller层方法还是不能跳转成功并且显示：</strong></p><img src="/2022/12/09/SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E7%9A%84%E5%A4%84%E7%90%86/3ba3ee48e47b7c1a56c1529ae3a8cde7.png" class><p><strong>原因可能是没有添加模板引擎</strong>，SpringBoot访问静态资源只支持静态模板引擎（SpringBoot默认不支持jsp作为视图），所以这里我添加了thymeleaf：<br><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再通过控制层url访问时就成功了</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔2022-11-25</title>
      <link href="/2022/11/25/%E9%9A%8F%E7%AC%942022-11-25/"/>
      <url>/2022/11/25/%E9%9A%8F%E7%AC%942022-11-25/</url>
      
        <content type="html"><![CDATA[<p>   好久不写博客了，今天更一篇我最近很郁闷的一件事，最近在学习各种分布式框架技术，都要用到<strong>VMware虚拟机中的CentOS7系统环境进行操作</strong>。但是频繁的出现bug让我难受的一批。</p><p>目前为止，我已经卸载重新安装了两次CentOS7系统了。</p><p><strong>第一次</strong>好像在十月末，那次是因为Linux虚拟主机的IP地址频繁自动更换，虽然后面通过网上的方式将虚拟主机IP更改为静态地址，但是在使用XShell进行连接的时候经常连接不上，<strong>反复确认了em33的IP无误，端口号也试过很多，但还是连接不上</strong>，非常的郁闷啊谁懂~</p><p>   然后我在想是不是之前设置了一些东西搞坏了配置的原因，所以我就把挂载的CentOS卸载了，重新安装了一次。<strong>安装好系统之后的第一件事情就是在配置文件中配置静态地址</strong>（被动态IP消耗了太多时间了-麻了…）</p><p>编辑em33网关配置文件的命令：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p><strong>将动态IP更改为static静态地址，即将BOOTPROTO&#x3D;”static”，并且指定了IPADDR&#x3D;”192.168.195.128”</strong></p><p>   然后就大功告成了，<strong>又可以正常通过终端连接和操作虚拟主机，迎来了一个多月的安稳学习时间</strong>，但是天有不测风云啊…就在我以为一劳永逸的时候，现实又给了我狠狠一暴击…</p><br><p>   <strong>第二次</strong>是让我最郁闷的一次，也是最近我最烦心的，前前后后消耗了我大量的时间和精力…最后还没解决，只能再次重装虚拟机</p><p>   那天我高高兴兴的打开电脑、启动VM、启动CentOS、开启XShell、连接虚拟主机，嗯~非常顺利-非常丝滑，<strong>但当我开始使用docker进行pull资源时，一直报mirror问题</strong>，拉不下来。</p><p>   我一看觉得应该是<strong>配置镜像加速器</strong>的问题导致的，然后我就重新按部就班的配置了一遍阿里云镜像加速器，没想到还是报超时错误，我百思不得其解。</p><p>   后面网上debug的时候说是<strong>DNS解析问题</strong>，我又按照网上的方式进行dns配置，修改了好多东西，期间使用yum命令获取一些必要的东西时发现，<strong>yum命令也不能使用</strong>，阿西吧郁闷，我又去整yum的问题，卸载了yum，<strong>重装yum源的时候，需要用wget命令进行yum源的配置</strong>，但让我又又又郁闷了，<strong>wget命令也使用不了</strong>，报错：</p><p><code>wget: unable to resolve host address ‘tel.mirrors.163.com’</code></p><p>   啊！！！兜兜转转还是<strong>网络服务的问题</strong>啊，ping <a href="http://www.baidu.com/">www.baidu.com</a> 时发现确实我的虚拟主机现在连网络都跑不通，以我的直觉来说，应该又是什么东西自动修改了，就跟第一次重装时IP自动变化一样，我只能想到应该是DNS，但是按照网上的方式修改了好久还是那样。。。那我心想，<strong>会不会是我之前修改的一些配置导致的</strong>。。。</p><p>此时已经前前后后折磨了我快一个星期了，导致学习卡顿，天天打开电脑就是处理这玩意儿。。。第二天，<strong>果断卸载重装虚拟机</strong>，希望不会有这种事情发生了！保佑保佑保佑！！！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令总结</title>
      <link href="/2022/10/20/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2022/10/20/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><strong>学习了这么久Docker，我今天突然觉得，是时候对Docker的众多命令做一个总结了</strong><br><strong>Docker作为一个容器化镜像技术，无论是开发人员还是运维人员都是必须掌握的技能</strong><br><strong>以下总结列出了Docker中32条常用的命令以及它的参数选项等，方便自己或者他人日后查阅使用！</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、 docker login </span><br><span class="line">    docker login [OPTIONS] [SERVER]</span><br><span class="line">    [SERVER] 远程仓库地址</span><br><span class="line">    [OPTIONS]的常用值</span><br><span class="line">    -u string 用户名</span><br><span class="line">    -p string 密码</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">2、 docker search</span><br><span class="line">    docker search [OPTIONS] TERM</span><br><span class="line">    [OPTIONS]</span><br><span class="line">    -f filter 根据条件过滤镜像 </span><br><span class="line">    -no-trunc 显示完整镜像描述。默认情况下，搜索出来的镜像的描述太长会隐藏，no-trunc参数会让镜像信息完整展示出来</span><br><span class="line">    --limit 限制搜索出来的镜像个数，最大不超过100个，默认25个</span><br><span class="line">    --format 指定镜像显示的格式</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    -f参数表示根据条件过滤搜索出来的镜像 语法如下：</span><br><span class="line">    docker search -f KEY=VALUE TERM</span><br><span class="line">    KEY的选值如下：</span><br><span class="line">    stars int 根据热度过滤 如：stars=10表示过滤热度大于10的镜像</span><br><span class="line">    is-automated boolean 根据是否自动构建过滤，如：is-automated=false表示过滤非官方发布的镜像</span><br><span class="line">    is-official boolean 根据是否官方发布过滤 如：is-official=false表示过滤非官方发布的镜像</span><br><span class="line">    </span><br><span class="line">    --format参数用来指定搜索出来的镜像的显示的格式，语法如下：table表示使用表格的方式显示，支持\t格式</span><br><span class="line">    docker search --format &quot;[table] &#123;&#123;COLUMN&#125;&#125;[&#123;&#123;COLUMN&#125;&#125;...]&quot; TERM</span><br><span class="line">    COLUMN的可选值如下：</span><br><span class="line">    .NAME 显示镜像的名称列</span><br><span class="line">    .Description 显示镜像的描述列</span><br><span class="line">    .StarCount 显示镜像的热度一列</span><br><span class="line">    .IsOfficial 显示镜像是否是官方发布一列</span><br><span class="line">    .IsAutomated 显示镜像是否自动构建一列</span><br><span class="line">    如：docker search -f is-official=false --format &quot;table&#123;&#123;.Name&#125;&#125;\t&#123;&#123;.StarCount&#125;&#125;&quot; centos</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3、 docker push</span><br><span class="line">    docker push [OPTIONS] NAME[:TAG]</span><br><span class="line">    [OPTIONS]:可选参数</span><br><span class="line">    NAME：镜像名称</span><br><span class="line">    TAG：镜像版本号，可省略，默认是latest</span><br><span class="line">    </span><br><span class="line">    [OPTIONS]常用值</span><br><span class="line">    --disable-content-trust:推送时远程仓库不校验签名，默认true</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">4、 docker pull</span><br><span class="line">    docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br><span class="line">    [OPTIONS]:可选参数</span><br><span class="line">    NAME:镜像名称</span><br><span class="line">    TAG:镜像版本号，可省略，默认是latest</span><br><span class="line">    DIGEST:镜像的摘要，每个镜像都有对应的名称、id、摘要信息，每个摘要信息能唯一代表一个镜像，如</span><br><span class="line">    </span><br><span class="line">    OPTIONS常用值</span><br><span class="line">    -a:拉去镜像的所有版本号</span><br><span class="line">    --disable-count-trust:拉取时远程仓库不校验签名，默认true</span><br><span class="line">    -q:安静拉取,拉取过程中不展示详细信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">5、 docker images</span><br><span class="line">    docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line">    OPTIONS：可选参数</span><br><span class="line">    REPOSITORY:镜像路径</span><br><span class="line">    TAG：镜像版本号</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -a:显示所有镜像，包含中间映像(默认中间映像是隐藏的)</span><br><span class="line">    -f filter :根据条件过滤镜像</span><br><span class="line">    -q：只显示镜像id</span><br><span class="line">    no-trunc：显示完整的镜像id。默认情况下，镜像id只显示前12位，no-trunc参数会将镜像id完整的显示出来</span><br><span class="line">    --digests：显示镜像的摘要信息</span><br><span class="line">    --format：指定镜像显示的格式</span><br><span class="line">    </span><br><span class="line">    docker images -f KEY=VALUE [REPOSITORY[:TAG]]</span><br><span class="line">    KEY的可选值如下:</span><br><span class="line">    dangling boolean:过滤悬挂的镜像，如：dangling=true表示只显示悬挂的镜像</span><br><span class="line">    label string：根据标签过滤，如:label=version表示显示有version标签的镜像，lavel=version=1.0表示显示</span><br><span class="line">    version=1.0的镜像</span><br><span class="line">    before image:显示在某个镜像之前创建的镜像，如 before=centos:5.8表示显示在centos:5.8这个镜像之前创建的镜像</span><br><span class="line">    since image: 显示在某个存在之后创建的镜像，如：since=centos:5.8表示显示在centos:5.8这个镜像存在之后的镜像</span><br><span class="line">    reference string:模糊匹配 如：reference=cent*:5.*,显示名称以cent开头版本号以5开头的镜像</span><br><span class="line">    </span><br><span class="line">    --format参数用来指定镜像显示格式，语法如下。table表示使用表格的方式显示，支持\t格式</span><br><span class="line">    docker images --format &quot;[table]&#123;&#123;COLUMN&#125;&#125;[&#123;&#123;COLUMN&#125;&#125;...]&quot; [REPOSITORY[:TAG]]</span><br><span class="line">    COLUMN的可选值如下：</span><br><span class="line">    .ID:显示进行的名称列</span><br><span class="line">    .Repository:显示进行的描述列</span><br><span class="line">    .Tag：显示镜像的热度一列</span><br><span class="line">    .Digest：显示镜像是狗屎官方发布的一列</span><br><span class="line">    .CreateSince：显示镜像是否是自动构建的一列</span><br><span class="line">    .CreatedAt:显示镜像是否自动构建的一列</span><br><span class="line">    .Size：显示镜像是否自动构建的一列</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6、 docker rmi  可以删除一个或者多个本地镜像，通常情况应该用rm表示删除命令，但是在dokcer命令中rm表示删除容器，</span><br><span class="line">所以用rmi表示删除镜像，其中i是image的首字母</span><br><span class="line">    docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    IMAGE:镜像id或者仓库路径名称</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -f :强制删除，如果镜像有对应的容器正在运行，则不允许直接删除镜像，需要强制删除</span><br><span class="line">    --no-prune：不删除该镜像的过程镜像，默认是删除的</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">7、 docker tag 命令可以基于一个镜像，创建一个新版本的镜像并归入本地仓库，吃屎该镜像在仓库中存在两个版本，</span><br><span class="line">可以根据这两个镜像创建不同的容器</span><br><span class="line">    docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><br><span class="line">    SOURCE_IMAGE:原镜像</span><br><span class="line">    TARGET_IMAGE:新镜像</span><br><span class="line">    TAG:镜像版本号</span><br><span class="line">    </span><br><span class="line">    常用写法如：</span><br><span class="line">    基于redis:latest镜像创建my-redis1.0镜像，并把新镜像归入redis-lib仓库</span><br><span class="line">    docker tag redis:latest redis-lib/my-redis:1.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">8、 docker history 查看某一个镜像的创建历史。也就是镜像的提交记录</span><br><span class="line">    docker history [OPTIONS] IMAGE</span><br><span class="line">    OPTIONS :可选参数</span><br><span class="line">    IMAGE:镜像</span><br><span class="line">    </span><br><span class="line">    OPTIONS常用值：</span><br><span class="line">    -H boolean:已可读的格式打印日期和大小，默认true</span><br><span class="line">    -q:只显示镜像id</span><br><span class="line">    no-trunc：输出结果不截取，正常情况下查看到的结果如果某一列太长会被截取</span><br><span class="line">    --format string:指定镜像现实的格式</span><br><span class="line">    </span><br><span class="line">    --format用来指定镜像的显示格式，语法如下。table表示是用表格的方式显示，支持\t格式</span><br><span class="line">    docker history --format &quot;[table]&#123;&#123;COLUMN&#125;&#125;[&#123;&#123;COLUMN&#125;&#125;...]&quot; IMAGE</span><br><span class="line">    COLUMN可选值如下：</span><br><span class="line">    .ID：镜像的ID</span><br><span class="line">    .CreateSince：镜像的创建时长</span><br><span class="line">    .CreatedAt:镜像创建的时间戳</span><br><span class="line">    .CreatedBy:镜像创建使用的命令</span><br><span class="line">    .Size:镜像的大小</span><br><span class="line">    .Comment：镜像的评论</span><br><span class="line">    </span><br><span class="line">    常用写法如：</span><br><span class="line">    docker history --format &quot;table&#123;&#123;.ID&#125;&#125;\t&#123;&#123;.CreatedAt&#125;&#125;\t&#123;&#123;.CreatedBy&#125;&#125;&quot; centos</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">9、 docker save 把一个镜像或者多个镜像打包到一个文件，需要注意和export命令的区别</span><br><span class="line">    save命令打包的是镜像，包含镜像的所有信息</span><br><span class="line">    export命令打包的是容器，只是保存容器当时的快照，历史记录和云数据信息将会丢失</span><br><span class="line">    </span><br><span class="line">    docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line">    OPTIONS：可选参数</span><br><span class="line">    IMAGE:镜像</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -o string :指定目标文件，和linux原生命令&gt;有相同作用</span><br><span class="line">    </span><br><span class="line">    常见用法如：</span><br><span class="line">    docker save centos  redis &gt; /home/my-images.tar</span><br><span class="line">    docker save -o /home/my-images.tar centos redis</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">10、docker load 从指定文件中加载镜像，该文件需要是save命令保存的文件</span><br><span class="line">    docker load [OPTIONS]</span><br><span class="line">    OPTIONS：可选参数</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -i string :指定文件路径</span><br><span class="line">    -q:安静模式输出</span><br><span class="line">    </span><br><span class="line">    常见用法：</span><br><span class="line">    docker load &lt; /home/my-images.tar</span><br><span class="line">    docker load -i /home/my-images.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">11、docker run 创建一个容器并运行，如果创建容器的镜像不存在则会从远程镜像仓库下载</span><br><span class="line">               运行容器的同事还能给容器发用一个命令</span><br><span class="line">    docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    IMAGE:镜像</span><br><span class="line">    COMMAND:需要运行的命令</span><br><span class="line">    ARG:命令的参数</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值：</span><br><span class="line">    由于run命令的OPTIONS的可选值比较较多，这里列出使用频率最高的一些。</span><br><span class="line">    -i:以交互模式运行，通常鱼-t一起使用</span><br><span class="line">    -t:为容器分配一个伪终端，通常与-i一起使用</span><br><span class="line">    -d:后台模式运行容器，并返回容器id</span><br><span class="line">    -p list:指定端口映射，格式为宿主机端口：容器端口</span><br><span class="line">    -p:随机分配端口映射</span><br><span class="line">    --name  string：给容器制定一个名称</span><br><span class="line">    -m bytes:限制容器可以使用的内存大小，单位可选b/k/m/g</span><br><span class="line">    -v list：把宿主机的磁盘路径挂载到容器的某个路径</span><br><span class="line">    --volumes-from list:绑定别的容器某个路径到此容器的某个路径</span><br><span class="line">    -w:指定容器的工作目录，默认是根目录</span><br><span class="line">    --rm:当容器停止运行是自动删除</span><br><span class="line">    --hostname string:指定容器的主机名</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">12、docker start 启动一个或者多个已停止的容器</span><br><span class="line">    docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    CONTAINER：容器</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值：</span><br><span class="line">    -a:讲哦容器的标准输出或者标准错误附加到终端</span><br><span class="line">    -i:为容器附加一个标准输入终端</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">13、docker restart 对一个或者多个容器进行重启。如果容器是未启动的则会重启，正在运行的则会重启</span><br><span class="line">    docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    CONTAINER:容器</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -t int:在重启之前等待几秒，默认10秒</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">14、docker stop 停止一个或者多个正在运行的容器</span><br><span class="line">    kill命令也可以停止容器</span><br><span class="line">    不同的是stop命令允许容器在停止之前有一定的时间来进行额外操作，如释放连接，关闭请求等</span><br><span class="line">    kill命令则会直接强制杀死容器</span><br><span class="line">    docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    CONTAINER:容器</span><br><span class="line">    </span><br><span class="line">    OPTIONS常用值：</span><br><span class="line">    -t int：等待n秒后如果还没停止，直接杀死，默认10秒</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>15、docker kill 可以杀死一个或者多个正在运行的容器<br>docker kill [OPTIONS] CONTAINER [CONTAINER…]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS：可选值</span><br><span class="line">CONTAINER:容器</span><br><span class="line"></span><br><span class="line">OPTIONS的常用值：</span><br><span class="line">-s string:给容器发用一个信号，信号编号和linux原生命令kill的幸好编号一致，默认值9，</span><br><span class="line">-s参数信号编号常用值</span><br><span class="line">1：杀死并重新加载，也可用HUP</span><br><span class="line">9：强制杀死，也可用KILL</span><br><span class="line">15：正常停止，也可用TERM</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">16、docker rm 删除一个或者多个容器</span><br><span class="line">              如果容器正在运行，则需要通过-f参数强制删除</span><br><span class="line">    docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">    OPTIONS：可选参数</span><br><span class="line">    CONTAINER:容器</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -f:强制删除，即容器正在运行也可以删除</span><br><span class="line">    -l:删除容器之间的网络关系，而不是容器本身</span><br><span class="line">    -v:删除容器和它挂载的卷</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">17、docker pause 暂停一个或者多个正在运行的容器</span><br><span class="line">    docker pause CONTAINER [CONTAINER...]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">18、docker unpause 可以对一个或者多个暂停的容器取消暂停</span><br><span class="line">    docker unpause CONTAINER [CONTAINER...]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">19、docker create 可以创建一个容器，但不运行它，在需要的时候可以start命令启动，和run命令的用法几乎一致，</span><br><span class="line">都会创建一个容器，如果容器依赖的镜像不存在都会从远程仓库拉取</span><br><span class="line">    run命令创建容器后并运行容器</span><br><span class="line">    create命令只创建容器，不运行</span><br><span class="line">    docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line">    OPTIONS：可选参数</span><br><span class="line">    IMAGE：镜像</span><br><span class="line">    COMMAND：需要运行的命令</span><br><span class="line">    ARG：命令的参数</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    参数比较多，只列出一些常用的。</span><br><span class="line">    -i ：以交互模式运，通常与-t一起使用</span><br><span class="line">    -t ：为容器分配一个伪终端，通常与-i一起使用</span><br><span class="line">    -d ：后台模式运行容器，并返回容器id</span><br><span class="line">    -p list ：指定端口映射，格式为 宿主机端口：容器端口</span><br><span class="line">    -p ：随机分配端口映射</span><br><span class="line">    --name string : 给容器指定一个名称</span><br><span class="line">    -m bytes : 限制容器可以使用的内存大小</span><br><span class="line">    -v list ：把宿主机的磁盘路径挂载到容器的某个路径</span><br><span class="line">    --volumes-from list : 绑定别的容器某个路径到此容器的某个路径</span><br><span class="line">    -w ：指定容器的工作目录，默认是根目录</span><br><span class="line">    --rm ：当容器停止运行时自动删除</span><br><span class="line">    --hostname string ：指定容器的主机名</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">20、docker exec 在一个运行中的容器中执行一个命令</span><br><span class="line">    docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    CONTAINER:容器</span><br><span class="line">    COMMAND:要执行的命令</span><br><span class="line">    ARG：命令参数</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -d:命令在后台执行</span><br><span class="line">    -i:保持标准输入，通常与-t一起使用</span><br><span class="line">    -t:分配一个伪终端，通常与-i一起使用</span><br><span class="line">    -w string:指定容器的路径</span><br><span class="line">    </span><br><span class="line">    常见用法：</span><br><span class="line">    在容器中执行pwd命令</span><br><span class="line">    docker exec centos pwd</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">21、docker ps 列出所有容器列表，查看容器基本信息。不加任何参数情况下，默认列出正在运行的容器</span><br><span class="line">    CONTAINER ID ：容器id</span><br><span class="line">    IMAGE：对应的镜像</span><br><span class="line">    COMMAND：容器启动时运行的命令</span><br><span class="line">    CREATED：创建时间</span><br><span class="line">    PORTS：绑定的端口</span><br><span class="line">    NAMES：容器的名称</span><br><span class="line">    </span><br><span class="line">    docker ps [OPTIONS]</span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -a :显示所有容器，默认只显示正在运行的</span><br><span class="line">    -f filter:根据条件过滤容器</span><br><span class="line">    -n int : 显示最后创建的几个容器，包含所有状态</span><br><span class="line">    -l:显示最新创建的容器，包含所有状态</span><br><span class="line">    -q:只显示容器id</span><br><span class="line">    -s:显示容器的大小，默认不显示该列</span><br><span class="line">    --no-trunc:显示内容不截断，默认情况下显示的容器是截断后的信息</span><br><span class="line">    </span><br><span class="line">    docker ps -f KEY=VALUE</span><br><span class="line">    KEY的可选值</span><br><span class="line">    id:根据容器id过滤</span><br><span class="line">    name:查看容器名称中包含的给定字段的容器</span><br><span class="line">    exited:根据容器退出的错误码进行过滤</span><br><span class="line">    status:根据容器的状态进行过滤，状态可选值有：created、paused、exited、dead、running、restarting、removing</span><br><span class="line">    before:只显示在某个容器之前创建的容器</span><br><span class="line">    since:只显示在某个容器之后创建的容器</span><br><span class="line">    volume:过滤绑定了某个目录的容器，只针对运行中的容器</span><br><span class="line">    publish:根据宿主机的端口过滤，只针对运行中的容器</span><br><span class="line">    expose:根据容器端口过滤，只针对运行中的容器</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">22、docker inspect 获取容器或者镜像的元数据</span><br><span class="line">    元数据信息可以理解为容器或者镜像的详情，他比ps命令显示的内容要详细的多，显示格式是json类型</span><br><span class="line">    docker inspect [OPTIONS] CONTAINER|IMAGE [CONTAINER|IMAGE...]</span><br><span class="line">    OPTIONS：可选参数</span><br><span class="line">    CONTAINER:容器</span><br><span class="line">    IMAGE:镜像</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -f string : 格式化输出结果，inspect默认显示整个文件的详情，-f参数可以指定只显示某些属性</span><br><span class="line">    --s:只对容器有效，显示容器的配置文件行数和大小，显示的结果中会多出SizeRw/SizeRootFs两个参数</span><br><span class="line">    --type string:指定要inspect的类型，container表示容器，image表示镜像，默认是容器。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">23、docker stats 监控容器资源的使用情况，每秒刷新一次，直到使用ctrl+c退出</span><br><span class="line">    docker stats [OPTIONS] [CONTAINER...]</span><br><span class="line">    OPTIONS ：可选参数</span><br><span class="line">    CONTAINER ：容器</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -a filter ：显示所有容器的资源使用情况，默认只显示正在运行的</span><br><span class="line">    --format string: 格式化输出结果</span><br><span class="line">    --no-stream:不间隔刷新，只显示第一次统计结果</span><br><span class="line">    --no-trunc:不截断显示信息，默认情况下有些字段只显示简略信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">24、docker top 查看容器中运行的进程信息</span><br><span class="line">    top可以查看容器的进程信息，docker exec CONTAINER ps也可以查看容器的进程</span><br><span class="line">    前者查看的是容器运行在宿主机的进程id,后者查看的是容器内的进程id</span><br><span class="line">    docker top CONTAINER [ps OPTIONS]</span><br><span class="line">    </span><br><span class="line">    CONTAINER:容器</span><br><span class="line">    OPTIONS:ps命令的可选参数</span><br><span class="line">    </span><br><span class="line">    常用写法</span><br><span class="line">    查看centos镜像的宿主机进程id</span><br><span class="line">    docker top centos</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">25、docker rename 重命名容器</span><br><span class="line">    rename可以对容器进行重命名，在容器run时如果没有使用--name参数指定容器名称，可以用rename命令进行命名</span><br><span class="line">    docker rename CONTAINER NEW_NAME</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">26、docker attach 连接到容器内</span><br><span class="line">    attach 可以连接到容器内，这个容器必须是正在运行的容器，不是运行状态时，会报错</span><br><span class="line">    当使用ctrl+c或者exit等命令退出时，会导致容器停止运行，所以，不建议在生产环境中使用该命令。生产环境可以</span><br><span class="line">    使用exec命令进入容器</span><br><span class="line">    docker attach [OPTIONS] CONTAINER </span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    CONTAINER:容器</span><br><span class="line">    </span><br><span class="line">    OPTIONS常用值</span><br><span class="line">    --sig-proxy=false boolean:默认是true,为false时可以防止容器遇到ctrl+c退出信号时停止运行</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">27、docker update 更新一个或者多个容器的配置</span><br><span class="line">    docker update [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    CONTAINER:容器</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -m bytes:指定容器的内存大小，单位可选b、k、m、g</span><br><span class="line">    --memory-swap bytes:</span><br><span class="line">    --cpu demecial :cpu资源，如1.5表示可以使用宿主机的1.5个cpu资源</span><br><span class="line">    --cpuset-cpus string：容器可以使用宿主机的cpu内核编号，0-3表示4个内核都可以使用，1,3表示只能使用1和3号内核</span><br><span class="line">    --restart string:指定容器退出的重启策略。no：不重启；on-failure:容器非正常退出时重启；</span><br><span class="line">    on-failure:3：非正常退出时容器重启3次；alaways:总是重启；unless-stopped:在容器退出时总是重启容器，</span><br><span class="line">    但是不考虑在Docker守护进程启动时就已经停止的容器</span><br><span class="line">    --pids-limit int:限制容器进程或线程的数量，-1表示不限制</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">28、docker logs 查看容器日志</span><br><span class="line">    docker logs [OPTIONS] CONTAINER</span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    CONTAINER:容器</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -f:跟踪日志的实时输出</span><br><span class="line">    --until string:查看某个时间点之前的日志，格式：2020-07-13T13:47:20Z,或使用相对时间10m，表示10分钟之前</span><br><span class="line">    --since string:查看某个时间点之后的日志，格式：2020-07-13T13:47:20Z, 或使用相对时间10m,表示10分钟之内</span><br><span class="line">    -n int:查看最后几行日志，默认显示全部</span><br><span class="line">    -t :日志中显示时间戳</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">29、docker wait 阻塞容器，直到容器退出并打印它的退出代码</span><br><span class="line">    wait命令可以阻塞一个或者多个容器直到容器退出并打印它们的退出代码</span><br><span class="line">    docker wait CONTAINER [CONTAINER...]</span><br><span class="line">    CONTAINER:容器</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">30、docker port 列出端口的映射关系</span><br><span class="line">    docker port CONTAINER [PRIVATE_PORT[/PROTO]]</span><br><span class="line">    CONTAINER:容器</span><br><span class="line">    PRIVATE_PORT:容器端口</span><br><span class="line">    PROTO：端口使用的协议</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">31、docker export 将容器打包成一个文件</span><br><span class="line">    export命令可以将容器打包到一个文件中，和save命令容器混淆</span><br><span class="line">    export和save的不同之处在于：export打包的是容器，save打包的是镜像</span><br><span class="line">    export打包的是容器当时的快照，至于容器的历史记录和元数据信息都会丢失，还有，export的文件在被import成一个镜像时，</span><br><span class="line">    可以重新指定镜像的名称和版本号</span><br><span class="line">    docker export [OPTIONS] CONTAINER</span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    CONTAINER:容器</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -o string:指定打包文件</span><br><span class="line">    </span><br><span class="line">    常见用法：</span><br><span class="line">    将my-boot容器打包到my-boot.tar文件</span><br><span class="line">    docker export -o /tmp/my-boot.tar my-boot</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">32、docker import 从本地文件或者远程文件导入镜像到本地仓库</span><br><span class="line">    import可以从本地文件或者远程文件中导入镜像到本地仓库</span><br><span class="line">    如果是从文件导入，这个文件需要是export命令导出的文件</span><br><span class="line">    </span><br><span class="line">    docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br><span class="line">    OPTIONS:可选参数</span><br><span class="line">    file:文件地址</span><br><span class="line">    URL:URL地址</span><br><span class="line">    -:从标准输入终端导入，通常和linux的cat命令一起使用</span><br><span class="line">    REPOSITORY：本地镜像仓库地址</span><br><span class="line">    TAG：版本号</span><br><span class="line">    </span><br><span class="line">    OPTIONS的常用值</span><br><span class="line">    -m string :添加描述信息</span><br><span class="line">    -c list ：对创建的容器使用dockerfile命令</span><br><span class="line">    </span><br><span class="line">    import常见用法</span><br><span class="line">    1、 从my-boot.tar文件创建镜像</span><br><span class="line">        cat /tmp/my-boot.tar | docker import -</span><br><span class="line">    2、 从my-boot.tar文件导入镜像</span><br><span class="line">        docker import /tmp/my-boot.tar</span><br><span class="line">    3、 从my-boot.tar文件创建镜像，并指定镜像名称为my-boo-test、版本号为1.0</span><br><span class="line">        docker import /tmp/my-boot.tar my-boot-test:1.0</span><br><span class="line">    4、 从my-boot.tar文件创建镜像，备注信息为测试，并指定镜像名称为my-boot-test、版本号为1.0</span><br><span class="line">       docker import -m &quot;描述信息&quot;  /tmp/my-boot.tar my-boot-test:1.0</span><br><span class="line">    5、 从远程服务器的my-boot.tar文件创建镜像</span><br><span class="line">        docker import http://192.168.100.1:8080/images/my-boot.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机Linux主机ip自动变化解决</title>
      <link href="/2022/10/15/%E8%99%9A%E6%8B%9F%E6%9C%BALinux%E4%B8%BB%E6%9C%BAip%E8%87%AA%E5%8A%A8%E5%8F%98%E5%8C%96%E8%A7%A3%E5%86%B3/"/>
      <url>/2022/10/15/%E8%99%9A%E6%8B%9F%E6%9C%BALinux%E4%B8%BB%E6%9C%BAip%E8%87%AA%E5%8A%A8%E5%8F%98%E5%8C%96%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>今天我使用创建的虚拟机去用XShell远程连接的时候，报了连接错误，我再三检查我的配置信息都没有任何问题，连接步骤也都ok，可就是连接不成功，如图：</p><img src="/2022/10/15/%E8%99%9A%E6%8B%9F%E6%9C%BALinux%E4%B8%BB%E6%9C%BAip%E8%87%AA%E5%8A%A8%E5%8F%98%E5%8C%96%E8%A7%A3%E5%86%B3/366637cf171f1e136258f278f730e26f.png" class><p>在百思不得其解，最后决定按Xshell连接Linux的步骤重新连接一次，然后在虚拟机中的Linux系统终端输入ifconfig查询主机ip时发现：主机ip居然自动改变了，我重新使用变化后的ip地址进行Xshell连接，一次成功！果然，就是ip不正确的问题。</p><p>随后我就又郁闷了，主机ip还能自己变动吗，那要这么一直自己变动，那岂不是隔一段时间就得重新查询修改会话属性才能建立连接，太麻烦了！可不可以取消掉这种自动修改ip的机制，一劳永逸？</p><p>涉及我的知识盲区，我百度了一番这才有了答案。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p><strong>修改配置文件</strong><br>变化的原因：在配置文件&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33中，在一开始虚拟机设置的IP地址是dhcp是动态地址，所以才会一直变化，现在就要改成static再自己设置一个固定的ipaddr就可以了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p><strong>然后在打开的文件中修改如下配置：</strong></p><img src="/2022/10/15/%E8%99%9A%E6%8B%9F%E6%9C%BALinux%E4%B8%BB%E6%9C%BAip%E8%87%AA%E5%8A%A8%E5%8F%98%E5%8C%96%E8%A7%A3%E5%86%B3/e53587d51fd37b9a8b6829987b61ce07.png" class><p>修改完成后:wq保存并退出就好了<br>然后用reboot重启之后，再进行远程连接，地址就不变了！</p>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地项目推送到gitee（命令行方式）</title>
      <link href="/2022/10/05/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0gitee%EF%BC%88%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%B9%E5%BC%8F%EF%BC%89/"/>
      <url>/2022/10/05/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0gitee%EF%BC%88%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%B9%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>如何使用命令行方式将本地项目推送到gitee呢？</p><p>步骤如下：</p><br><p>1、首先在gitee上新建仓库<br>登录gitee账号，选择“仓库”，新建仓库。</p><br><p>2、在本地磁盘新建一个文件夹，上传代码。<br>2.1、在本地新建upload文件夹</p><p>2.2、在该文件夹中打开git Bash</p><p>2.3、输入命令1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>2.4、使用命令添加远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure><p>git remote add origin <a href="https://gitee.com/%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A0%81%E4%BA%91%E7%94%A8%E6%88%B7%E5%90%8D/%E8%A6%81%E4%B8%8A%E4%BC%A0%E5%88%B0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D">https://gitee.com/自己的码云用户名/要上传到的仓库名</a></p><p>2.5、输入命令2： git pull origin master<br>使用 git pull origin master 命令，将码云上的仓库pull到本地文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>2.6、将要上传的文件添加到upload文件夹中</p><p>2.7、输入命令3：git add .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>使用git add . （. 表示所有的）或者 git add + 文件名 &#x2F;&#x2F; 将文件保存到缓存区</p><p>2.8、输入命令4：git commit -m “新添加的文件内容描述”<br>使用git commit -m “新添加的文件内容描述”<br>双引号里边添加文件描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m “新添加的文件内容描述”</span><br></pre></td></tr></table></figure><p>2.9、输入命令5：git push origin master （将代码提交到主分支）<br>使用git push origin master ，将本地仓库推送到远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电商项目经验杂记3</title>
      <link href="/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B03/"/>
      <url>/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h1 id="第一小点：​"><a href="#第一小点：​" class="headerlink" title="第一小点：​"></a>第一小点：​</h1><p>在springboot配置文件中自定义配置项，并注入到类中的属性中：<br>application.yml中自定义配置：</p><img src="/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B03/3e894166f8262142afe0d8f83fd27bbd.png" class><p>注意：这里可能会报黄以及无法点击跳转，但可以注入我们可以不用管<br>类中的属性上添加注解：</p><img src="/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B03/d7b8f21b1159370b90e78912ff1c6679.png" class><p>这样就完成了自定义配置项对项目解耦合</p><p>*记录：2022年9月2日01点55分</p><h1 id="第二小点"><a href="#第二小点" class="headerlink" title="第二小点"></a>第二小点</h1><p>【完成项目的新增收货地址功能中的获取用户输入的省市区数据，至此数据库该表中所有的字段都补全完毕】</p><p>控制器接收前端参数使用url的方式：<br>@PathVariable注解用于接收url中的参数，该参数必须在{}中</p><img src="/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B03/de65eb29079cf23fbc173490cc2c81f4.png" class>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电商项目经验杂记2</title>
      <link href="/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B02/"/>
      <url>/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前端接收后端返回数据时的问题"><a href="#1-前端接收后端返回数据时的问题" class="headerlink" title="1.前端接收后端返回数据时的问题"></a>1.前端接收后端返回数据时的问题</h1><p>在写用户信息加载的时候，前端ajax请求成功发到后端，也成功返回了json格式的字符串，但取json中的属性值就是不成功。<br>最后发现，success中的回调函数的参数不能直接为data，然后data.username，而是json.data.username</p><img src="/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B02/47f83e75b8c568e7a243d56c0784e1e1.png" class><p><strong>这里有个前端小知识点：设置单选框radio是否选中要用prop函数，即：选择器.prop(‘checked’,true)</strong></p><h1 id="2-在做头像上传业务功能时的一些收获"><a href="#2-在做头像上传业务功能时的一些收获" class="headerlink" title="2.在做头像上传业务功能时的一些收获"></a>2.在做头像上传业务功能时的一些收获</h1><p>（这个因为没接触过，所以记了挺多东西）</p><ul><li>文件上传的文件处理以及异常规划类都写在控制层内，因为带有文件数据包，层与层之间传递包影响效率<br>文件上传时，使用SpringMVC中提供的MultipartFile接口作为控制器的参数，接收前端发来的文件内的数据包\</li></ul><img src="/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B02/37d01d1ea6666d996670690cbb0a791c.png" class><p>前端页面这里采用form表单进行提交，必须要填enctype属性</p><img src="/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B02/809ce5bdd433e7623ad9b18f11757835.png" class><ul><li>上传头像时，当上传的头像大于设定的10MB时，不按预期抛出自定义异常，而是抛出了tomcat的FileSize异常<br>问题的根源：tomcat默认设置能接收HTTP POST请求的大小最大为2M,如果你的POST请求传递的数据大于2M,就会报错误。<br>解决的办法：修改tomcat的配置文件C:&#x2F;MinyooCMS&#x2F;tomcat&#x2F;conf&#x2F;server.xml(或者安装在D盘文件路径是D: &#x2F;MinyooCMS&#x2F;tomcat&#x2F;conf&#x2F;server.xml),找到里面的<Connector>标签,在该标签中添 加”maxPostSize”属性,将该属性值设置成你想要的最大值,单位是字节,或者把这个值设置为 0(maxPostSize&#x3D;”0”),tomcat将不再检查POST的大小。即可解决上述问题。<br>springboot的项目使用的都是内嵌的Tomcat服务器，因此不好按上述修改配置文件。<br>可以在springboot的主配置文件中声明最大文件设置：</Connector></li></ul><img src="/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B02/b02471469f9ac3eb22ede96f4a0a9d9f.png" class><ul><li><p>修改头像向后端传输的是文件，而serio()只能用来传递字符串等类型的表单参数，<br>所以这里data属性因使用js中的FormData对象来封装并传递文件数据，并且要设置processData和contentType属性，如下：</p><img src="/2022/09/20/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B02/1c8f471e978eab22096dc89fc41fe80c.png" class></li><li><p>最后在前端页面中使用了cookie技术，将上传的头像保存在cookie中，并设置过期时间为7天<br>这样在有效期内每次需要展示用户头像的时候，都不需要再查数据库，而是直接从cookie中取即可</p></li></ul><p>对应的实现代码在本机的：E:\src_htt\Spring\projects\computer_store\src\main\resources\static\web\upload.html 中</p><ul><li>这个头像上传还可以做优化，比如Controller层可以简化，把业务逻辑和异常处理都放在业务层<br>（不过在控制层也有好处就是减少数据传输造成性能损失）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电商项目经验杂记1</title>
      <link href="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/"/>
      <url>/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<p>记录一些自己在电商项目上遇到和解决了一些问题的经验，提高日后的开发能力和效率</p><h1 id="1、使用逆向工程生成实体类和Mapper"><a href="#1、使用逆向工程生成实体类和Mapper" class="headerlink" title="1、使用逆向工程生成实体类和Mapper"></a>1、使用逆向工程生成实体类和Mapper</h1><p>本机逆向工程代码实例位置：E:\devTools\maven-tools\逆向工程实例代码\mybatis-generator</p><h2 id="逆向工程生成的类中有很多的注释，批量删除注释的方法："><a href="#逆向工程生成的类中有很多的注释，批量删除注释的方法：" class="headerlink" title="逆向工程生成的类中有很多的注释，批量删除注释的方法："></a>逆向工程生成的类中有很多的注释，批量删除注释的方法：</h2><p>**ctrl + R 正则表达式匹配： **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/|[ \t]*//.*)</span><br></pre></td></tr></table></figure><h2 id="2、单元测试写法："><a href="#2、单元测试写法：" class="headerlink" title="2、单元测试写法："></a>2、单元测试写法：</h2><p>单元测试时，自定义的测试类要这么写：</p><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/e8f14b5f9664ae51a9972bc6f1f4f991.png" class><h1 id="3、Service层处理业务逻辑功能更清晰"><a href="#3、Service层处理业务逻辑功能更清晰" class="headerlink" title="3、Service层处理业务逻辑功能更清晰"></a>3、Service层处理业务逻辑功能更清晰</h1><p>例如：service层下有异常处理包，有service接口，有接口的实现类impl包</p><p><strong>快捷键：ctrl + alt + t 对选中的代码块进行环绕，例如 if 、while 、for 、try等等</strong></p><h1 id="4、service中的注册功能进行密码加密："><a href="#4、service中的注册功能进行密码加密：" class="headerlink" title="4、service中的注册功能进行密码加密："></a>4、service中的注册功能进行密码加密：</h1><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/728bc69fd4c4d0a9b285a2109410fc4b.png" class><p><strong>盐值若不记录在数据库的话，会导致登录功能有误</strong></p><h2 id="外部定义一个调md5加密算法的方法："><a href="#外部定义一个调md5加密算法的方法：" class="headerlink" title="外部定义一个调md5加密算法的方法："></a>外部定义一个调md5加密算法的方法：</h2><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/e5fd33aa360e962863620c416b2ad366.png" class><h1 id="5、控制层封装响应结果集对象"><a href="#5、控制层封装响应结果集对象" class="headerlink" title="5、控制层封装响应结果集对象"></a>5、控制层封装响应结果集对象</h1><p>当中要包含状态码、描述信息、带泛型<E>的数据，以此对象返回前端</E></p><p>其中描述信息中，要将捕获的异常赋值进去，这样前端就能显示后台出了什么问题</p><h1 id="6、Controller层定义用于统一异常处理的基类BaseController"><a href="#6、Controller层定义用于统一异常处理的基类BaseController" class="headerlink" title="6、Controller层定义用于统一异常处理的基类BaseController"></a>6、Controller层定义用于统一异常处理的基类BaseController</h1><h2 id="使用-ExceptionHandler-要拦截的异常类-class-注解进行异常统一拦截处理"><a href="#使用-ExceptionHandler-要拦截的异常类-class-注解进行异常统一拦截处理" class="headerlink" title="使用@ExceptionHandler(要拦截的异常类.class) 注解进行异常统一拦截处理"></a>使用@ExceptionHandler(要拦截的异常类.class) 注解进行异常统一拦截处理</h2><p>@ExceptionHandler注解用于统一处理方法抛出的异常。当我们使用这个注解时，需要定义一个 异常的处理方法，再给这个方法加上@ExceptionHandler注解，这个方法就会处理类中其他方法 （被@RequestMapping注解）抛出的异常。@ExceptionHandler注解中可以添加参数，参数是某 个异常类的class，代表这个方法专门处理该类异常。</p><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/3fe7d2f8eb6705af4c72ad126baed260.png" class><p>又回顾了一遍ajax局部刷新向后台发送请求的流程，学习了一个新的传递参数的方式：<br>使用Ajax传递参数的时候，可以<strong>用serialize直接获取被选择的表单内所有参数值</strong>，<br>一起传值给后端，后端使用的springboot的话可以自动装配参数</p><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/f427b05692ec3eee67addade1437413c.png" class><br><br><h1 id="7、使用会话Session的收获"><a href="#7、使用会话Session的收获" class="headerlink" title="7、使用会话Session的收获"></a>7、使用会话Session的收获</h1><p>用session进行登录功能时，将获取session的对象封装到了controller层的基类中 (controller层中所有的controller都继承这个基类)</p><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/20c16830a5ec1b0cd94b2679b63997d4.png" class><br><h1 id="8、使用框架中的拦截器HandlerInterceptor："><a href="#8、使用框架中的拦截器HandlerInterceptor：" class="headerlink" title="8、使用框架中的拦截器HandlerInterceptor："></a>8、使用框架中的拦截器HandlerInterceptor：</h1><p>在访问某些页面时拦截未登录的用户，有三个方法，一般只用preHandle()方法</p><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/becdb303c1ce55da76fcd27c98c3989a.png" class><p>有拦截器还不够，因为有些页面，用户未登录也可以访问，不能全部拦截<br><strong>所以需要使用servlet中的过滤器来指定白名单(未登录可以访问的url)和黑名单(未登录不能访问的url)</strong></p><br><h1 id="9、servlet中的过滤器："><a href="#9、servlet中的过滤器：" class="headerlink" title="9、servlet中的过滤器："></a>9、servlet中的过滤器：</h1><img src="/2022/09/15/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E6%9D%82%E8%AE%B01/6480410e873ed7aeec97599cb353c1e7.png" class><br><br>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux+nginx部署静态网站步骤以及访问nginx遇到的问题解决</title>
      <link href="/2022/08/28/Linux-nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AEnginx%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2022/08/28/Linux-nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AEnginx%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p><strong>首先说一下使用linux+nginx部署静态网站的步骤：</strong><br><strong>这里以ace静态网站为例，说明部署此类静态网站步骤：</strong></p><h1 id="一、linux-nginx部署ace静态网站："><a href="#一、linux-nginx部署ace静态网站：" class="headerlink" title="一、linux+nginx部署ace静态网站："></a>一、linux+nginx部署ace静态网站：</h1><h2 id="1、使用传输工具将项目传输到linux的-x2F-opt-x2F-www-x2F-ace目录下"><a href="#1、使用传输工具将项目传输到linux的-x2F-opt-x2F-www-x2F-ace目录下" class="headerlink" title="1、使用传输工具将项目传输到linux的&#x2F;opt&#x2F;www&#x2F;ace目录下"></a>1、使用传输工具将项目传输到linux的&#x2F;opt&#x2F;www&#x2F;ace目录下</h2><h2 id="2、使用vim修改nginx-1-14-2-x2F-conf-x2F-nginx-conf中的配置文件"><a href="#2、使用vim修改nginx-1-14-2-x2F-conf-x2F-nginx-conf中的配置文件" class="headerlink" title="2、使用vim修改nginx-1.14.2&#x2F;conf&#x2F;nginx.conf中的配置文件:"></a>2、使用vim修改nginx-1.14.2&#x2F;conf&#x2F;nginx.conf中的配置文件:</h2><p>即修改location中的请求拦截转发<br>location后面跟的是url中的请求地址<br>root后跟的是项目ace源文件在linux文件中的磁盘位置<br>index后面跟的是访问此项目时默认跳转的页面</p><img src="/2022/08/28/Linux-nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AEnginx%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/img.png" class><p><strong>这里要注意路径问题，源文件的位置必须放在root + &#x2F;ace 里面</strong></p><h2 id="3、修改完成后重启nginx"><a href="#3、修改完成后重启nginx" class="headerlink" title="3、修改完成后重启nginx"></a>3、修改完成后重启nginx</h2><p>至此，即可正常访问部署的静态网站</p><h1 id="二、部署nginx时遇到的问题解决："><a href="#二、部署nginx时遇到的问题解决：" class="headerlink" title="二、部署nginx时遇到的问题解决："></a>二、部署nginx时遇到的问题解决：</h1><p>这里出现问题：<br><strong>访问192.168.10.129&#x2F;ace时，出现无法访问，如下图这样</strong></p><img src="/2022/08/28/Linux-nginx%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AEnginx%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/img_1.png" class><h2 id="1、原因："><a href="#1、原因：" class="headerlink" title="1、原因："></a>1、原因：</h2><p>磁盘中有若干nginx配置文件，未加载到正确的nginx.conf配置文件导致拦截转发请求失败</p><h2 id="2、解决"><a href="#2、解决" class="headerlink" title="2、解决"></a>2、解决</h2><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p>采用指定配置文件方式启动nginx服务：<br><code>./nginx -c /usr/soft/nginx/nginx-1.14.2/conf/nginx.conf</code></p><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p>修改nginx服务启动时的默认配置文件加载<br>修改方式如下：<br>####<strong>（1）查看Nginx默认配置文件nginx.conf路径</strong><br><code>nginx -t</code></p><p>查看到Nginx默认配置文件路径位置是：<br><code>/usr/local/nginx/conf/nginx.conf，可按以下步骤将其更改到/xxx/nginx路径下。</code></p><p>####<strong>（2）将原文件移动到需要更改的目录</strong><br><code>mv /usr/local/nginx/conf/nginx.conf /xxx/nginx/</code></p><p>####<strong>（3）创建连接到原目录</strong><br><code>ln -s /xxx/nginx/nginx.conf /usr/local/nginx/conf/</code></p><p>####<strong>（4）启动&#x2F;重启Nginx</strong><br><code>/usr/local/nginx/sbin/nginx 或 /usr/local/nginx/sbin/nginx -s reload</code></p><p><strong>推荐使用第一种方式，指定配置文件的加载，更加灵活</strong></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用springboot配置文件对源代码实现解耦合</title>
      <link href="/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/"/>
      <url>/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h1><p>今天在做项目的时候，<strong>写一个无session登录拦截以及部分页面放行的功能时</strong>，使用的传统方法，当配置项过多、并且这些配置项以后可能会更改，这种传统的方式将所有的配置项都写死在了java类中，感觉耦合度非常高，<strong>所以我就想：能不能对这种方式做一些优化？我想了很多种方案，不断尝试，例如使用注解注入配置文件的方式，</strong>我试了以下几种注解注入，结果要不就是报一堆异常，要不就是不能达到目的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:ListUrl.yml&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:ListUrl.yml&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;whitelist&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(LoginFilterConfig.class)</span></span><br></pre></td></tr></table></figure><p><strong>最后，功夫不负有心人，我找到了一种堪称完美的方式：使用springboot配置文件+Data赋值注入的方式，实现解耦合！</strong></p><p><strong>再介绍我这种方式之前，先给大家看看传统的方式完成登录拦截和放行功能的写法：</strong></p><h1 id="1、传统写法"><a href="#1、传统写法" class="headerlink" title="1、传统写法"></a>1、传统写法</h1><h2 id="（1）定义一个拦截器，并实现HandlerInterceptor并配置拦截条件以及页面跳转"><a href="#（1）定义一个拦截器，并实现HandlerInterceptor并配置拦截条件以及页面跳转" class="headerlink" title="（1）定义一个拦截器，并实现HandlerInterceptor并配置拦截条件以及页面跳转"></a>（1）定义一个拦截器，并实现HandlerInterceptor并配置拦截条件以及页面跳转</h2><img src="/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/a7c17cb5ec527df928e232c63e0ae6f6.png" class><h2 id="（2）定义过滤器类，并实现WebMvcConfigurer接口中的addInterceptors"><a href="#（2）定义过滤器类，并实现WebMvcConfigurer接口中的addInterceptors" class="headerlink" title="（2）定义过滤器类，并实现WebMvcConfigurer接口中的addInterceptors"></a>（2）定义过滤器类，并实现WebMvcConfigurer接口中的addInterceptors</h2><p><strong>手动创建List集合，并将放行的页面的字符串一个个添加到list中</strong></p><img src="/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/4406f8deb4fc7ba9411007e146fd7ae5.png" class><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>​这样就使用传统的方式完成了登录拦截和部分页面放行的功能，<strong>但这种方式从代码上看，很明显的一个缺陷就是设置放行页面时，代码耦合度太高，</strong>将来某一天想取消放行或增加额外的放行页面时，还需要修改java源代码。</p><p>​<strong>所以我想到了使用配置文件的方式，将这些放行页面的路径字符串添加为springboot的list集合配置项，然后在java代码中注入该集合，实现配置文件的读取。</strong></p><p><strong>将来修改放行页面时直接在配置文件中改，这样不就耦合度大大降低了吗？</strong></p><h1 id="2、配置文件的方式"><a href="#2、配置文件的方式" class="headerlink" title="2、配置文件的方式"></a>2、配置文件的方式</h1><h2 id="（1）配置拦截器，这步同上，没有变化"><a href="#（1）配置拦截器，这步同上，没有变化" class="headerlink" title="（1）配置拦截器，这步同上，没有变化"></a>（1）配置拦截器，这步同上，没有变化</h2><h2 id="（2）springboot主配置文件声明配置项"><a href="#（2）springboot主配置文件声明配置项" class="headerlink" title="（2）springboot主配置文件声明配置项"></a>（2）springboot主配置文件声明配置项</h2><p>​<strong>这里一定要注意List集合在yml配置文件中的书写方式</strong></p><p>​<strong>- 与 list元素之间有空格！</strong></p><img src="/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/5a2c73825d02143d502337650f9661ff.png" class><h2 id="（3）配置拦截器"><a href="#（3）配置拦截器" class="headerlink" title="（3）配置拦截器"></a>（3）配置拦截器</h2><h3 id="注解作用以及原理解释："><a href="#注解作用以及原理解释：" class="headerlink" title="***注解作用以及原理解释："></a>***注解作用以及原理解释：</h3><p>​<strong>- 使用Lombok中的@Data注解进行属性的赋值注入</strong></p><p>​<strong>- 添加了@Configuration注解后，此类会被spring容器标记为配置类，springboot会将其主配置文件application.yml中的配置项与此类中的属性进行”按名对应“，并通过Set方法注入（此步使用@Data自动完成）</strong></p><p>​<strong>- @ConfigurationProperties注解设置配置项的前缀</strong></p><img src="/2022/08/25/%E4%BD%BF%E7%94%A8springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%B9%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6%E5%90%88/b04270d66878745c37583e460a171f4e.png" class><h2 id="完成-1"><a href="#完成-1" class="headerlink" title="完成"></a>完成</h2><p>​<strong>这样，优化后的这种读取配置文件的方式实现登录拦截放行功能就完成了，相比传统的那种，不仅代码更简洁，而且耦合度更低，代码更易于修改维护管理，以后遇到类似的可以使用配置文件解耦合的地方可以经常使用！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排除Bug的一些记录</title>
      <link href="/2022/08/20/%E6%8E%92%E9%99%A4Bug%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/08/20/%E6%8E%92%E9%99%A4Bug%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>本文记录了一些在网站开发初期遇到的常见问题以及解决方法，记录在这里用于巩固自己记忆以及帮助搜索这些问题的人能更快地解决问题！</p><h1 id="1、远程部署网站后未加载最新的文章"><a href="#1、远程部署网站后未加载最新的文章" class="headerlink" title="1、远程部署网站后未加载最新的文章"></a>1、远程部署网站后未加载最新的文章</h1><p>使用hexo new “” ，创建文章并完成，上传gitee、部署网站、刷新后发现新文章仍未发布<br>这种情况一般是上传问题！</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先检查hexo d上传后的gitee仓库的最后一次更新时间是否为&quot;刚刚&quot;</span><br><span class="line">若不是，则检查_config.yml中的仓库地址repository和分支branch是否正确</span><br><span class="line">若是，则在giteePages服务页中，手动点击更新，待重新部署后，文章正常显示！</span><br></pre></td></tr></table></figure><h1 id="2、使用md语法写的文章图片不显示或加载失败"><a href="#2、使用md语法写的文章图片不显示或加载失败" class="headerlink" title="2、使用md语法写的文章图片不显示或加载失败"></a>2、使用md语法写的文章图片不显示或加载失败</h1><h2 id="1-我们需要安装一个图片路径转换的插件，插件名字为hexo-asset-image，只需执行以下命令"><a href="#1-我们需要安装一个图片路径转换的插件，插件名字为hexo-asset-image，只需执行以下命令" class="headerlink" title="(1)我们需要安装一个图片路径转换的插件，插件名字为hexo-asset-image，只需执行以下命令"></a>(1)我们需要安装一个图片路径转换的插件，插件名字为hexo-asset-image，只需执行以下命令</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先进入你的hexo根目录下，然后执行以下命令下载插件</span><br><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure><h2 id="2-打开hexo根目录下的-config-yml文件，修改post-asset-folder为true"><a href="#2-打开hexo根目录下的-config-yml文件，修改post-asset-folder为true" class="headerlink" title="(2)打开hexo根目录下的_config.yml文件，修改post_asset_folder为true"></a>(2)打开hexo根目录下的_config.yml文件，修改post_asset_folder为true</h2><p>这一步的目的是：打开文章资源文件夹功能。<br>当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new 命令创建新文章时自动创建一个文件夹。<br>这个资源文件夹将会有与这个md文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，<br>你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p><h2 id="3-使用相对路径引用图片或其他静态资源"><a href="#3-使用相对路径引用图片或其他静态资源" class="headerlink" title="(3)使用相对路径引用图片或其他静态资源"></a>(3)使用相对路径引用图片或其他静态资源</h2><p>在md语法中，使用的是这种方式引用图片：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用! [](你的博文名字/图片名称)插入图片即可。</span><br></pre></td></tr></table></figure><p>但是在hexo3之后这种语法已经不适用了，引用资源时采用下面这种方式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先将图片等静态资源放在hexo new 命令执行后生成的同名文件夹中</span><br><span class="line">然后在图片引用处：</span><br><span class="line">&#123;% asset_img &quot;图片名称&amp;后缀&quot; &quot;图片描述信息&quot; %&#125;</span><br></pre></td></tr></table></figure><p>官方参考使用说明地址：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hexo.io/zh-cn/docs/asset-folders</span><br></pre></td></tr></table></figure><p>问题解决参考博主地址：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_33827590/article/details/93066614?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-93066614-blog-113460538.pc_relevant_multi_platform_whitelistv4eslandingrelevant2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-93066614-blog-113460538.pc_relevant_multi_platform_whitelistv4eslandingrelevant2&amp;utm_relevant_index=1</span><br></pre></td></tr></table></figure><h1 id="3、访问网站时样式加载失败"><a href="#3、访问网站时样式加载失败" class="headerlink" title="3、访问网站时样式加载失败"></a>3、访问网站时样式加载失败</h1><p>这个问题是比较常见的一个问题了，即使之前我解决过，但今天居然又遇到这种情况，但很快也又解决了！<br>我分享一下我面对这个问题的一个解决思路：</p><p>1、一般都是路径错误，在网页端按F12进入调试页，就可以查看样式未加载的404报错信息中的URL错误<br>2、观察仓库中图片的路径<br>3、在hexo g生成的public文件夹中的index.html中查看css引用地址和仓库中的图片路径的不同之处</p><img src="/2022/08/20/%E6%8E%92%E9%99%A4Bug%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/img.png" class><p>4、一般都是根路径的问题，我这里的root直接为”&#x2F;“，表示为仓库的根路径<br>这样在引用图片的时候不需要加格外的相对路径，直接输入图片名称即可引用</p><img src="/2022/08/20/%E6%8E%92%E9%99%A4Bug%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/img_1.png" class><h1 id="4、网站URL取消子域名"><a href="#4、网站URL取消子域名" class="headerlink" title="4、网站URL取消子域名"></a>4、网站URL取消子域名</h1><p>之前我这个博客的网站地址是<a href="https://doublepeach/gitee.io/Doublepeach/git.io">https://Doublepeach/gitee.io/Doublepeach/git.io</a><br>可以看到，这个网址比较长，而且前后域名和子域名重复，完全一样。<br>而现在的域名：<a href="https://doublepeach.gitee.io/">https://doublepeach.gitee.io</a> 就简洁多了 ，那怎么做到的呢？<br>(1)首先在仓库的管理页中，将仓库名称和仓库地址修改为一样的，如下：</p><img src="/2022/08/20/%E6%8E%92%E9%99%A4Bug%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/img_2.png" class><p>(2)然后在hexo根目录下的_config.yml文件中修改repository仓库地址为新地址<br>(3)还是在_config.yml中,修改URL为 https:&#x2F;&#x2F;仓库名.gitee.io 即可</p><h1 id="5、文章模板设设置"><a href="#5、文章模板设设置" class="headerlink" title="5、文章模板设设置"></a>5、文章模板设设置</h1><p>每次hexo new 新文章时都需要写一些顶部的文章配置，为了方便，可以直接修改创建文件时的模板内容<br>修改位置为：  hexo根目录下的scaffolds(脚手架)下的post.md<br>这里推荐的常用模板：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: 标签</span><br><span class="line">description: 描述信息</span><br><span class="line">sticky: 优先级</span><br><span class="line">comments: 是否开启评论(true或false)</span><br><span class="line">keywords: 关键字</span><br><span class="line">top_img: 顶部图片</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo部署到gitee时图片无法加载问题的完美解决</title>
      <link href="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/"/>
      <url>/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h1><p>使用hexo部署静态网站或博客时，经常会有一个问题：明明导入了图片以及其他的js文件以及css文件，也成功部署了网站，但访问时，无论是图片还是样式就是加载不出来？？！！</p><p>这篇文章记录了我发现问题，并一步一步排除问题的过程。若不想听我絮絮叨debug过程，想直接解决问题，可直接跳到总结即可。</p><br><h1 id="二、问题查找"><a href="#二、问题查找" class="headerlink" title="二、问题查找"></a>二、问题查找</h1><p>前段时间在github上部署的时候也出现过图片样式不加载的问题，当时查找出来的问题是_config.yml文件中的url和root错误，修改完后还在csdn社区发帖子记录了这个问题以及解决方案。</p><p>万万没想到，才没过几天，我又遇到了css样式无法加载的这个问题。由于github访问速度实在受不了，所以这次我是想部署到gitee上，没想到又遇到这个问题，我第一反应是几天前的那个问题，但我检查后发现并没有修改，url和root都和在github部署时一样，</p><p>那是什么原因导致的呢？我带着这个疑问，看了网上其他的一些博主的解决方案，试了好几个还是无法解决样式不加载的问题，最后我看到了一篇文章中提到的一个观点，让我突然醍醐灌顶：<strong>在hexo g 渲染命令执行后，生成的public文件夹中的index.html文件中的路径不匹配资源或拼接的路径有误</strong>，我立马就去hexo g查看了我的public下的index.html中的资源路径引用，果然发现了问题</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/30e757e95c930ecf1c48dfd7935be3ad.png" class title="图片"><p>这路径，一看就不合法呀，”&#x2F;.&#x2F;“是什么鬼？! <strong>所以我立马就定位到是我引入图片资源时配置的路径的问题</strong>，然后我将主题配置文件中所有的.&#x2F;都修改为&#x2F; 。如下：</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/a18be1fedea1c2b632c3def8987c9217.png" class><p>这样再hexo g编译时生成的资源路径拼接就正确了，如下：</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/667bd3bd00a1932b3f678abe99a1ca8b.png" class><p>解决了路径问题后我立马开启hexo三件套hexo clean 、hexo g 、 hexo d 上传、重部署、刷新！结果。。。还是css样式不加载。。。我人傻了，懵了好一整子，<strong>痛定思痛</strong>，决定再细细走一边这个路径问题，在我鼠标跟着大脑逻辑一阵跳转后，终于发现：<strong>还是路径问题，只不过这个路径问题是仓库路径根路径问题</strong></p><p>原先我的url和root是这样的：</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/9cd6bd88bce3c8702aa19ca941bc390d.png" class><p>但事实上，<strong>这里的url是要填写最终网站部署的url，而root根路径就是代表仓库本身，而hexo g 是直接把各种静态资源放在了重渲染后生成的public文件夹，并且hexo d上传时也只上传public文件夹中的资源</strong>，所以root这里不需要加任何东西，如下：</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/f9f8b97b92235fab9a07cd98af74c133.png" class><p><strong>然后，三件套重部署后，刷新！噫！成了！！！css等样式都正常加载，其他资源也能正常访问！ 完美解决！</strong></p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><h3 id="1、修改-config-yml文件中的url和root"><a href="#1、修改-config-yml文件中的url和root" class="headerlink" title="1、修改_config.yml文件中的url和root"></a>1、修改_config.yml文件中的url和root</h3><p>如图：</p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/f9f8b97b92235fab9a07cd98af74c133.png" class><p><strong>其中url为自己最终部署的网站地址，gitee上为pages页中的以下路径：</strong></p><img src="/2022/08/19/%E5%85%B3%E4%BA%8Ehexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee%E6%97%B6%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3/098e3a413146d4622cf8a40560a5cb6f.png" class><h3 id="2、检查资源路径问题"><a href="#2、检查资源路径问题" class="headerlink" title="2、检查资源路径问题"></a>2、检查资源路径问题</h3><p><strong>查看hexo g后的public文件夹中的index.html文件中的静态资源引用，url拼接是否正确</strong>,若不正确或有明显拼接错误的，在资源引用处修改，这里每个人的情况不一样，就不上图了，只要注意一点：“ url + root + 资源引入 ” 这三个拼接起来要等于你要引入的静态资源在上传gitee后的仓库中的资源路径。</p><br><h3 id="这样就可以完美解决问题了，文章图片正常加载！！！"><a href="#这样就可以完美解决问题了，文章图片正常加载！！！" class="headerlink" title="这样就可以完美解决问题了，文章图片正常加载！！！"></a>这样就可以完美解决问题了，文章图片正常加载！！！</h3>]]></content>
      
      
      
        <tags>
            
            <tag> hexo相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2022/08/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2022/08/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>测试一下图片导入功能~~~</p><h2 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h2><p><img src="/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/f9f8b97b92235fab9a07cd98af74c133.png"></p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><img src="/2022/08/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/f9f8b97b92235fab9a07cd98af74c133.png" class title="图片"><p>测试完成，第一种不能显示图片，第二种可以<br>（要注意：md文件和资源文件不在同一个文件夹下，而是关联关系）</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2022/08/16/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/"/>
      <url>/2022/08/16/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/10/hello-world/"/>
      <url>/2022/08/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
